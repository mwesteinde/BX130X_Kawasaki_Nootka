<div id="Desktop" data-tchmi-type="TcHmi.Controls.System.TcHmiView" data-tchmi-top="0" data-tchmi-left="0" data-tchmi-width-mode="Value" data-tchmi-min-width="100" data-tchmi-min-width-unit="%" data-tchmi-height-mode="Value" data-tchmi-min-height="100" data-tchmi-min-height-unit="%" data-tchmi-width="800" data-tchmi-height="600">



<script data-tchmi-target-attribute="data-tchmi-background-color" type="application/json">
{
  "color": "rgba(255, 255, 255, 1)"
}
</script>
<div id="RegionMain" data-tchmi-type="TcHmi.Controls.System.TcHmiRegion" data-tchmi-height="500" data-tchmi-height-unit="px" data-tchmi-left="10" data-tchmi-left-unit="px" data-tchmi-top="90" data-tchmi-top-unit="px" data-tchmi-width="780" data-tchmi-width-unit="px" data-tchmi-target-content="Content/Startup.content">
</div>
<div id="TcHmiButton" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiButton" data-tchmi-height="50" data-tchmi-height-unit="px" data-tchmi-left="10" data-tchmi-left-unit="px" data-tchmi-text="" data-tchmi-top="16" data-tchmi-top-unit="px" data-tchmi-width="50" data-tchmi-width-unit="px" data-tchmi-word-wrap="true" data-tchmi-background-image="Images/Back.png" data-tchmi-background-image-width="50" data-tchmi-is-enabled="%s%C1007.MAIN.fbMachine.escapeRunScreenEnable%/s%">

<script data-tchmi-target-attribute="data-tchmi-trigger" type="application/json">
[
  {
    "event": "TcHmiButton.onPressed",
    "actions": [
      {
        "objectType": "JavaScript",
        "active": true,
        "sourceLines": [
          "function updateContent(targetContentString, newContent) {",
          "    try {",
          "        var currentContent = TcHmi.Symbol.readEx(\"%ctrl%RegionMain::CurrentContent%/ctrl%\");",
          "        var targetContent = TcHmi.Symbol.readEx(targetContentString);",
          "        console.log(\"Current Content:\", currentContent);",
          "        console.log(\"Target Content:\", targetContent);",
          "",
          "        if (currentContent === targetContent) {",
          "            TcHmi.Symbol.writeEx(\"%ctrl%RegionMain::TargetContent%/ctrl%\", newContent);",
          "            console.log(\"Content updated to:\", newContent);",
          "            return true;",
          "        } else {",
          "            console.log(\"No update needed as current content does not match targetContent.\");",
          "        }",
          "    } catch (error) {",
          "        console.log(\"Failed to update content due to error:\", error);",
          "        return false; // Indicate failure",
          "    }",
          "    return false; // Indicate failure",
          "}",
          "",
          "function attemptUpdates() {",
          "    if (updateContent(\"%ctrl%Initialize%/ctrl%\", \"Content/Startup.content\")) return;",
          "    if (updateContent(\"%ctrl%SelectProgram%/ctrl%\", \"Content/Initialize.content\")) return;",
          "    if (updateContent(\"%ctrl%Run%/ctrl%\", \"Content/SelectProgram.content\")) return;",
          "",
          "    console.log(\"All update attempts failed after retries.\");",
          "}",
          "",
          "try {",
          "    attemptUpdates();",
          "} catch (error) {",
          "\tconsole.log(\"Unexpected error\", error);",
          "    console.error(\"An unexpected error occurred during update attempts:\", error);",
          "}"
        ],
        "injectContextObject": false,
        "asyncWait": true,
        "waitMode": "Synchronous"
      }
    ]
  }
]
</script>
</div>
<div id="TcHmiButton_1" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiButton" data-tchmi-height="50" data-tchmi-height-unit="px" data-tchmi-left="70" data-tchmi-left-unit="px" data-tchmi-text="" data-tchmi-top="16" data-tchmi-top-unit="px" data-tchmi-width="50" data-tchmi-width-unit="px" data-tchmi-word-wrap="true" data-tchmi-background-image="Images/Settings.png" data-tchmi-background-image-width="50" data-tchmi-is-enabled="%s%C1007.MAIN.fbMachine.escapeRunScreenEnable%/s%">
</div>
<div id="PastJobs" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiTextblock" data-tchmi-height="70" data-tchmi-height-unit="px" data-tchmi-left="439" data-tchmi-left-unit="px" data-tchmi-text="%f%%s%C1007.MAIN.fbMachine.eSystemState%/s%%/f%" data-tchmi-top="10" data-tchmi-top-unit="px" data-tchmi-width="100" data-tchmi-width-unit="px" data-tchmi-word-wrap="true">
</div>

<script data-tchmi-target-attribute="data-tchmi-border-color" type="application/json">
{
  "color": "rgba(255, 255, 255, 1)"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-border-width" type="application/json">
{
  "left": 1,
  "right": 1,
  "top": 1,
  "bottom": 1,
  "leftUnit": "px",
  "rightUnit": "px",
  "topUnit": "px",
  "bottomUnit": "px"
}
</script>
<div id="ButtonHome" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiTextblock" data-tchmi-height="70" data-tchmi-height-unit="px" data-tchmi-left="659" data-tchmi-left-unit="px" data-tchmi-text="" data-tchmi-top="10" data-tchmi-top-unit="px" data-tchmi-width="131" data-tchmi-width-unit="px" data-tchmi-word-wrap="true" data-tchmi-background-image="Images/NootkaLogo.png" data-tchmi-background-image-width="131" data-tchmi-is-enabled="%s%C1007.MAIN.fbMachine.escapeRunScreenEnable%/s%">

<script data-tchmi-target-attribute="data-tchmi-trigger" type="application/json">
[
  {
    "event": "ButtonHome.onPressed",
    "actions": [
      {
        "objectType": "WriteToSymbol",
        "active": true,
        "symbolExpression": "%ctrl%RegionMain::TargetContent%/ctrl%",
        "value": {
          "objectType": "StaticValue",
          "valueType": "tchmi:framework#/definitions/ContentPath",
          "value": "Content/Startup.content"
        },
        "asyncWait": true
      }
    ]
  }
]
</script>
</div>
<div id="Error_Status" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiTextblock" data-tchmi-height="70" data-tchmi-height-unit="px" data-tchmi-left="130" data-tchmi-left-unit="px" data-tchmi-text="%s%C1007.MAIN.fbMachine.sHMIErrorDisplay%/s%" data-tchmi-top="10" data-tchmi-top-unit="px" data-tchmi-width="201" data-tchmi-width-unit="px" data-tchmi-word-wrap="true">

<script data-tchmi-target-attribute="data-tchmi-trigger" type="application/json">
[
  {
    "event": "Error_Status.onPressed",
    "actions": [
      {
        "objectType": "Condition",
        "active": true,
        "parts": [
          {
            "if": [
              {
                "compare1": {
                  "objectType": "Symbol",
                  "valueType": "tchmi:framework#/definitions/MeasurementValue",
                  "symbolExpression": "%ctrl%Error_Status::Height%/ctrl%"
                },
                "compare2": {
                  "objectType": "StaticValue",
                  "valueType": "tchmi:framework#/definitions/MeasurementValue",
                  "value": 70.0
                },
                "compareOperator": "==",
                "logic": null
              }
            ],
            "then": [
              {
                "objectType": "WriteToSymbol",
                "active": true,
                "symbolExpression": "%ctrl%Error_Status::Height%/ctrl%",
                "value": {
                  "objectType": "StaticValue",
                  "valueType": "tchmi:framework#/definitions/MeasurementValue",
                  "value": 300.0
                },
                "asyncWait": true
              },
              {
                "objectType": "WriteToSymbol",
                "active": true,
                "symbolExpression": "%ctrl%Error_Status::BorderWidth%/ctrl%",
                "value": {
                  "objectType": "StaticValue",
                  "valueType": "tchmi:framework#/definitions/BorderWidth",
                  "value": {
                    "left": 1,
                    "right": 1,
                    "top": 1,
                    "bottom": 1,
                    "leftUnit": "px",
                    "rightUnit": "px",
                    "topUnit": "px",
                    "bottomUnit": "px"
                  }
                },
                "asyncWait": true
              }
            ]
          },
          {
            "else": [
              {
                "objectType": "WriteToSymbol",
                "active": true,
                "symbolExpression": "%ctrl%Error_Status::Height%/ctrl%",
                "value": {
                  "objectType": "StaticValue",
                  "valueType": "tchmi:framework#/definitions/MeasurementValue",
                  "value": 70.0
                },
                "asyncWait": true
              },
              {
                "objectType": "WriteToSymbol",
                "active": true,
                "symbolExpression": "%ctrl%Error_Status::BorderWidth%/ctrl%",
                "value": {
                  "objectType": "StaticValue",
                  "valueType": "tchmi:framework#/definitions/BorderWidth",
                  "value": null
                },
                "asyncWait": true
              }
            ]
          }
        ],
        "asyncWait": true
      }
    ]
  }
]
</script>

















<script data-tchmi-target-attribute="data-tchmi-background-color" type="application/json">
{
  "color": "rgba(255, 255, 255, 1)"
}
</script>









<script data-tchmi-target-attribute="data-tchmi-border-color" type="application/json">
{
  "color": "rgba(0, 0, 0, 1)"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-border-width" type="application/json">
{
  "left": 0,
  "right": 0,
  "top": 0,
  "bottom": 0,
  "leftUnit": "px",
  "rightUnit": "px",
  "topUnit": "px",
  "bottomUnit": "px"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-border-style" type="application/json">
{
  "left": "Solid",
  "right": "Solid",
  "top": "Solid",
  "bottom": "Solid"
}
</script>
</div>
<div id="ResetButton" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiButton" data-tchmi-height="70" data-tchmi-height-unit="px" data-tchmi-left="341" data-tchmi-left-unit="px" data-tchmi-text="Reset" data-tchmi-top="10" data-tchmi-top-unit="px" data-tchmi-width="88" data-tchmi-width-unit="px" data-tchmi-word-wrap="true" data-tchmi-state-symbol="%s%C1007.MAIN.fbMachine.bHMIReset%/s%">
</div>
<div id="TcHmiDateTimeDisplay" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiDateTimeDisplay" data-tchmi-height="70" data-tchmi-height-unit="px" data-tchmi-left="549" data-tchmi-left-unit="px" data-tchmi-top="10" data-tchmi-top-unit="px" data-tchmi-width="100" data-tchmi-width-unit="px" data-tchmi-time-display-layout="TimeDateMultiLine">
</div>
<div id="PopupButton" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiButton" data-tchmi-height="50" data-tchmi-height-unit="px" data-tchmi-left="800" data-tchmi-left-unit="px" data-tchmi-text="Button" data-tchmi-top="149" data-tchmi-top-unit="px" data-tchmi-width="100" data-tchmi-width-unit="px" data-tchmi-word-wrap="true" data-tchmi-state-symbol="%s%C1007.MAIN.fbMachine.sHMIPopup%/s%" data-tchmi-is-enabled="true">

<script data-tchmi-target-attribute="data-tchmi-trigger" type="application/json">
[
  {
    "event": "PopupButton.onStatePressed",
    "actions": [
      {
        "objectType": "JavaScript",
        "active": true,
        "sourceLines": [
          "TcHmi.Symbol.readEx2(\"%s%C1007.MAIN.fbMachine.popupMessage%/s%\", function (data) {",
          "    if (data.error === TcHmi.Errors.NONE) {",
          "        // This is where you handle the successfully read value",
          "        alert(data.value);",
          "    } else {",
          "        // Handle error situation here",
          "        alert('Error reading symbol: ' + data.error);",
          "    }",
          "});"
        ],
        "injectContextObject": false,
        "asyncWait": true,
        "waitMode": "Synchronous"
      }
    ]
  }
]
</script>

<script data-tchmi-target-attribute="data-tchmi-background-color" type="application/json">
{
  "color": "rgba(255, 255, 255, 1)"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-text-color" type="application/json">
{
  "color": "rgba(255, 255, 255, 1)"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-border-color" type="application/json">
{
  "color": "rgba(255, 255, 255, 1)"
}
</script>
</div>
</div>