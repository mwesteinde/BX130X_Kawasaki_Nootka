<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_Robot" Id="{d50c368b-652f-4516-b34d-9545576d1fa6}" SpecialFunc="None">
    <Declaration><![CDATA[//Todo - Add flags for if communicating, program info, 
FUNCTION_BLOCK FB_Robot
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	robotPose 		: Structure_RobotPose;	//Stores robot pose

	//----------Inputs From Robot ----------
	jt1_pose_1 AT %I* 		: USINT; //Signal 1-8
	jt1_pose_2 AT %I* 		: USINT; //Signal 9-16
	jt2_pose_1 AT %I* 		: USINT; //Signal 17-25
	jt2_pose_2 AT %I* 		: USINT; //Signal 26-32
	jt3_pose_1 AT %I* 		: USINT; //Signal 33-40
	jt3_pose_2 AT %I* 		: USINT; //Signal 41-48
	jt4_pose_1 AT %I* 		: USINT; //Signal 49-56
	jt4_pose_2 AT %I* 		: USINT; //Signal 57-64
	jt5_pose_1 AT %I* 		: USINT; //Signal 65-72
	jt5_pose_2 AT %I* 		: USINT; //Signal 73-80
	jt6_pose_1 AT %I* 		: USINT; //Signal 81-88
	jt6_pose_2 AT %I* 		: USINT; //Signal 89-96
	inRobotMotorOn			: BOOL; //Signal number 97
	inRobotError			: BOOL; //Signal 98
	inRobotAutomaticMode	: BOOL; //Signal 99
	inRobotAtHome			: BOOL; //Signal 100
	inRobotInTeach			: BOOL; //Signal 101
	inRobotCycleStart		: BOOL; //Signal 102
	inRobotPowerOn			: BOOL; //Signal 103
	inRobotPoseDataIsSent	: BOOL; //Signal 104
	inRobotEStopOn			: BOOL; //Signal 105
	inRobotBatteryAlarm		: BOOL; //Signal 106
	inRobotToolNumberCurrent: USINT; //Signal 107-110
	inRobotToolNumberRequest: USINT; //Signal 111-114
	inRobotReleaseTool		: BOOL; //Signal 115
	inRobotProgramRunning	: BOOL; //Signal 116
	inRobotToolUpdated		: BOOL; //Signal 117
	inRobotStartofProgram	: BOOL; //Signal 118
	inRobotHoldMode			: BOOL; //Signal 119
	inRobotCurrentProgram	: USINT; //Signals 120-123
	inRobotAtCleanPosition	: BOOL; //Signal 124
	sigs97104 AT %I*		: USINT;
	sigs105112 AT %I*		: USINT;
	sigs113120 AT %I*		: USINT;
	sigs121128 AT %I*		: USINT;
	ztool_pose_1 AT %I* 	: USINT; //Signal 129-136
	ztool_pose_2 AT %I* 	: USINT; //Signal 137-144
	sigs145152 AT %I*		: USINT;
	sigs153160 AT %I*		: USINT;
	sigs161168 AT %I*		: USINT;
	sigs169176 AT %I*		: USINT;
	sigs177184 AT %I*		: USINT;
	tool_coords_x 			: USINT; //Signal 145-156
	tool_coords_y 			: USINT; //Signal 157-168
	tool_coords_z 			: USINT; //Signal 169-180
	currentTool				: Tool_Type;
	
	
	//----------Outputs To Robot ----------
	outRobotControlPowerOn AT %Q*	: BOOL := TRUE;
	outRobotTurnMotorOn				: BOOL; //Signal 1001
	outRobotResetError				: BOOL; //Signal 1002
	outRobotStartCycle				: BOOL; //Signal 1003
	outRobotResetProgram			: BOOL; //Signal 1004
	outRobotStartProgram			: BOOL; //Signal 1005
	outRobotRunHold		 			: BOOL; //Signal 1006
	outRobotHome					: BOOL; //Signal 1007
	outRobotTurnMotorOff			: BOOL; //1008
	outRobotToolReleased			: BOOL; //Signal 1009
	outRobotCurrentTool				: USINT; //Signal 1010-1013
	outRobotNoEStop					: BOOL := TRUE; //Signal 1014
	outRobotSpindleStopped			: BOOL; //Signal 1016
	outRobotProgramChoice			: USINT; //Signals 1017-1020
	outRobotProgramOption1			: BOOL; //Signal 1021
	outRobotProgramOption2			: BOOL; //Signal 1022
	outRobotProgramOption3			: BOOL; //Signal 1023
	outRobotRequestedTool			: USINT; //Signal 1024-1027
	outRobotProgramSelected			: BOOL; //Signal 1028
	outRobotGoToCleanupPosition		: BOOL; // Signal 1029 
	outRobotMoveX					: BOOL; // Signal 1030
	outRobotMoveY					: BOOL; // Signal 1031
	outRobotMoveZ					: BOOL; // Signal 1032
	outRobotMovePositive			: BOOL; // Signal 1033
	outRobotBoardWidth51Inches			: BOOL; //Signal 1034
	
	sigs10011008	AT %Q*			: USINT;
	sigs10091016	AT %Q*			: USINT;
	sigs10171024	AT %Q*			: USINT;
	sigs10251032	AT %Q*			: USINT;
	sigs10331040	AT %Q*			: USINT;
	sigs10411048	AT %Q*			: USINT;
	timerOutRobotStartProgram		: TON;
	
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[Update_Status();

	IF outRobotResetProgram AND inRobotStartofProgram THEN
		outRobotStartCycle := TRUE;
		outRobotResetProgram := FALSE;
	END_IF
	
	IF inRobotCycleStart AND NOT inRobotStartofProgram THEN
		outRobotStartCycle := FALSE;
	END_IF
	
	IF NOT inRobotCycleStart AND inRobotStartofProgram THEN
		outRobotStartCycle := NOT outRobotStartCycle;
	END_IF
	
	//Turn off startRobot once program started TODO: Turn off after 5 seconds
	IF inRobotProgramRunning THEN
		outRobotStartProgram := FALSE;
		outRobotGoToCleanupPosition := FALSE;
	END_IF

//Change request to home robot once robot is in home position
//	IF inRobotAtHome AND outRobotProgramChoice = 12 THEN 
//		outRobotHome := FALSE;
//	END_IF
	
//Turn off error reset and motor when on
	IF NOT inRobotError THEN
		outRobotResetError := FALSE;
	END_IF
	
	IF inRobotMotorOn THEN		
		outRobotTurnMotorOn := TRUE;
	END_IF
	
	//Switch to main program TODO
	timerOutRobotStartProgram(IN := outRobotStartProgram, PT := T#30S);
	IF timerOutRobotStartProgram.Q THEN
		outRobotStartProgram := FALSE;
	END_IF
]]></ST>
    </Implementation>
    <Method Name="EStop_OFF" Id="{11b55d3b-4c86-4338-971e-1665e9d7cb48}">
      <Declaration><![CDATA[//Turns external Estop off
METHOD EStop_OFF : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[outRobotNoEStop := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="ForceStop_Robot" Id="{cd69170d-edd1-4221-b229-919e555987e2}">
      <Declaration><![CDATA[//E-stop to robot
METHOD ForceStop_Robot : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[outRobotNoEStop := FALSE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Go_TO_Cleanup" Id="{cb389d38-df14-47a9-8041-23dcf4c8f0bd}">
      <Declaration><![CDATA[METHOD Go_To_Cleanup : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[outRobotGoToCleanupPosition := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Home_Robot" Id="{eca540c4-31fc-4643-aeb8-caefcff4553d}">
      <Declaration><![CDATA[//Send home command to robot
METHOD Home_Robot
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[outRobotHome := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Init_Robot" Id="{5fa8699b-d302-47dd-8fe6-b7724c082bbc}">
      <Declaration><![CDATA[METHOD Init_Robot : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[outRobotResetError := TRUE;
outRobotTurnMotorOn := TRUE;
outRobotRunHold := TRUE;
outRobotStartCycle := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Program_Select" Id="{5ccc5e7e-14d0-4912-bf3c-54f9c88aeb76}">
      <Declaration><![CDATA[// Select the robot program based on HMI inputs
METHOD Program_Select
VAR_INPUT
	programChoice :	USINT;
	option1 : BOOL;
	option2 : BOOL;
	option3 : BOOL;
	boardWidthIs51 : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[outRobotProgramChoice := programChoice;
outRobotProgramOption1 := option1;
outRobotProgramOption2	:= option2;
outRobotProgramOption3	:= option3;
outRobotBoardWidth51Inches := boardWidthIs51;
outRobotProgramSelected := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Release_Update" Id="{dba9479c-b587-4cb4-8aba-4cf3f2e05c5d}">
      <Declaration><![CDATA[METHOD Release_Update
VAR_INPUT
	release : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[outRobotToolReleased := release;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Reset_Robot" Id="{77e8bcdc-f7d0-483d-81fa-3d726fa4ee3a}">
      <Declaration><![CDATA[//Resets robot errors
METHOD Reset_Robot : BOOL //Returns true if robot reset successfully
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[outRobotNoEStop := TRUE;
outRobotResetError := TRUE;
outRobotTurnMotorOn := TRUE;
outRobotTurnMotorOff := FALSE;
outRobotRunHold := TRUE;
outRobotStartProgram := FALSE;
Reset_Robot := NOT(inRobotError OR inRobotEStopOn);
IF Reset_Robot THEN
	Stop_Robot_Program(forgetProgram := FALSE);
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Robot_Coords_Match_Tool" Id="{0ccbe5ad-34a8-44b8-a7ff-f15b1d889beb}">
      <Declaration><![CDATA[METHOD Robot_Coords_Match_Tool : BOOL
VAR_INPUT
	current_Tool : TOOL_TYPE;
END_VAR
VAR
	tooltransform : ARRAY[1..3] OF LREAL;
	sigs145160 : UINT := sigs153160*256 + sigs145152;
	sigs153168 : UINT := sigs161168*256 + sigs153160;
	sigs169184 : UINT := sigs177184*256 + sigs169176;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[tooltransform[1] := (sigs145160 AND 16#FFF) - 4094/2; //Bits 145-156, x value
tooltransform[2] := SHR((sigs153168 AND 16#FFF0), 4) - 4094/2; // Bits 157-168, y value
tooltransform[3] := (sigs169184 AND 16#FFF) - 4094/2; // Bits 169-180, z value

IF ABS(current_Tool.x_coord - tooltransform[1]) < 2 AND ABS(current_Tool.y_coord - tooltransform[2]) < 2 AND ABS(current_Tool.z_coord - tooltransform[3]) < 2 THEN
	Robot_Coords_Match_Tool := TRUE;
ELSE
	Robot_Coords_Match_Tool := FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Robot_Manual_Control" Id="{ed6ccda4-2af5-42af-8ac3-98592d92e5da}">
      <Declaration><![CDATA[//TODO: Implement
METHOD Robot_Manual_Control
VAR_INPUT
	x_negative : BOOL;
	x_positive : BOOL;
	y_negative : BOOL;
	y_positive : BOOL;
	z_negative : BOOL;
	z_positive : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[outRobotMovePositive := x_positive OR y_positive OR z_positive;
outRobotMoveX := x_negative OR x_positive;
outRobotMoveY := y_negative OR y_positive;
outRobotMoveZ := z_negative OR z_positive;]]></ST>
      </Implementation>
    </Method>
    <Method Name="RunHold_Robot" Id="{feac628f-72cf-4100-8d56-47c2e35d8c99}">
      <Declaration><![CDATA[//Holds robot if false
METHOD RunHold_Robot
VAR_INPUT
	RunHold : BOOL; //True for run, False for hold
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[outRobotRunHold := RunHold;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Start_Robot" Id="{95ede5df-1a05-4c33-b6a8-dcc0ec83997b}">
      <Declaration><![CDATA[//STart robot program
METHOD Start_Robot
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[outRobotTurnMotorOn := TRUE;
outRobotStartProgram := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Stop_Robot_Program" Id="{6c078892-c602-48a3-b370-75ca6dae0e8d}">
      <Declaration><![CDATA[METHOD Stop_Robot_Program : BOOL
VAR_INPUT
	forgetProgram : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[outRobotResetProgram := TRUE;
IF forgetProgram THEN
	outRobotProgramSelected := FALSE;
END_IF
outRobotStartProgram := FALSE;
RunHold_Robot(RunHold := True);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Turn_Off_Program_Selected" Id="{6e528639-7fd4-42df-ba6c-144e16c42b39}">
      <Declaration><![CDATA[METHOD Turn_Off_Program_Selected : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[outRobotProgramSelected := FALSE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Update_Pose" Id="{095f6df8-3cda-4049-b351-7910f936202a}">
      <Declaration><![CDATA[//Updates current robot pose
//TODO make flag that verifies pose is being sent
METHOD Update_Pose : Structure_RobotPose
VAR_INPUT
END_VAR
VAR
	dustBoot : Array2DStaticMatrix; //This instance is the matrix that the code will interact with
	dustBoot_Data : ARRAY[1..4,1..1] OF LREAL := [-58.997,133.95,455.3,1]; //centre coordinates wrt robot flange
	dustBoot_NE : ARRAY[1..4,1..1] OF LREAL := [102.900,157.511, 283,1];
	dustBoot_SE : ARRAY[1..4,1..1] OF LREAL := [104.4,-25.4,463.580,1];
	dustBoot_SW : ARRAY[1..4,1..1] OF LREAL := [-100.52,-23.366,463.9,1];
	dustBoot_NW : ARRAY[1..4,1..1] OF LREAL := [-101.4,156.4,284,1];
	dustBoot_SRightCorner : ARRAY[1..4,1..1] OF LREAL := [-211, 32, 405.187,1];
	dustBoot_NRightCorner : ARRAY[1..4,1..1] OF LREAL := [-210.197,98.825,339.353,1];
	dustBootCornersMatrix : ARRAY[1..6] OF Array2DStaticMatrix;
	dustBootCornersData : ARRAY[1..6] OF ARRAY[1..4,1..1] OF LREAL := [[102.900,157.511, 283,1], [104.4,-25.4,463.580,1], [-100.52,-23.366,463.9,1], [-101.4,156.4,284,1], [-211, 32, 405.187,1], [-210.197,98.825,339.353,1]];
	
	maxY : LREAL;
	minY : LREAL;
	
	joints : ARRAY[1..6] OF LREAL;
	jointsrad : ARRAY[1..6] OF LREAL;
	alpha : ARRAY[1..6] OF LREAL := [-PI/2,PI,PI/2,PI/2,PI/2,0];
	theta : ARRAY[1..6] OF LREAL := [PI/2,PI/2,-PI,-PI,PI,PI/2];
	d : ARRAY[1..6] OF LREAL := [530,0,0,1650,0,225];
	a : ARRAY[1..6] OF LREAL := [200,-1160,230,0,0,0];
	
	dh : ARRAY[1..6] OF Array2DStaticMatrix;
	dh_data : ARRAY[1..6] OF ARRAY[1..4,1..4] OF LREAL;
	temp : ARRAY[1..5] OF Array2DStaticMatrix;
	temp_data : ARRAY[1..5] OF ARRAY[1..4,1..4] OF LREAL;
	i : INT;
	
	Result : Array2DStaticMatrix; //This instance is the resulting column vector
	Result_Data : ARRAY[1..4,1..1] OF LREAL := [1, 2, 3,1]; //This array will act as the memory for the resulting column vector
	
	Corners : ARRAY[1..6] OF Array2DStaticMatrix; //This instance is the resulting column vector
	Corners_Data : ARRAY[1..6] OF ARRAY[1..4,1..1] OF LREAL; //This array will act as the memory for the resulting column vector
	
	success : ARRAY[1..13] OF BOOL; //records success or failure of the matrix multiplication
	equal : BOOL; //records success if the resulting vector is equal to the first
	zpose:LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// RobotPose
joints[1] := -((UINT_TO_LREAL(jt1_pose_2)*256 + UINT_TO_LREAL(jt1_pose_1) - 40000)/100);
joints[2] := ((UINT_TO_LREAL(jt2_pose_2)*256 + UINT_TO_LREAL(jt2_pose_1) - 40000)/100);
joints[3] := ((UINT_TO_LREAL(jt3_pose_2)*256 + UINT_TO_LREAL(jt3_pose_1) - 40000)/100);
joints[4] := ((UINT_TO_LREAL(jt4_pose_2)*256 + UINT_TO_LREAL(jt4_pose_1) - 40000)/100);
joints[5] := ((UINT_TO_LREAL(jt5_pose_2)*256 + UINT_TO_LREAL(jt5_pose_1) - 40000)/100);
joints[6] := ((UINT_TO_LREAL(jt6_pose_2)*256 + UINT_TO_LREAL(jt6_pose_1) - 40000)/100);

zpose := ((UINT_TO_LREAL(ztool_pose_2)*256 + UINT_TO_LREAL(ztool_pose_1) - 4000));

dustBoot(Data := dustBoot_Data);
Result(Data := Result_Data);
FOR i := 1 TO 6 DO
	jointsrad[i] := DEG_TO_RAD(joints[i]);
	dh[i](Data := dh_Data[i]);
	dh[i].Denavit_Hartenberg(jt := jointsrad[i], theta := theta[i], alpha := alpha[i], d := d[i], a := a[i]);
END_FOR

FOR i := 1 TO 5 DO
	temp[i](Data := temp_data[i]);
END_FOR

success[1] := Matrix_Product(dh[1], dh[2], temp[1]);

FOR i := 2 TO 5 DO
	success[i] := Matrix_Product(temp[i-1], dh[i+1], temp[i]);
END_FOR

success[7] := Matrix_Product(temp[5],dustBoot,Result);
maxY := -5000;
minY := 5000;
FOR i := 1 TO 6 DO
	Corners[i](Data := Corners_Data[i]);
	dustBootCornersMatrix[i](Data := dustBootCornersdata[i]);
	success[i+7] := Matrix_Product(temp[5],dustBootCornersMatrix[i],corners[i]);
	IF corners[i].GetI(1) > maxY THEN
		maxY := corners[i].GetI(1);
	END_IF
	IF corners[i].GetI(1) < minY THEN
		minY := corners[i].GetI(1);
	END_IF
END_FOR

robotPose.xPose := Result.GetI(0);
robotPose.yPose := (maxY + minY) / 2;
robotPose.yPoseDustBootNorth := minY;
robotPose.yPoseDustBootSouth := maxY;
robotPose.zPose := zpose;
Update_Pose := robotPose;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Update_Spindle_Status" Id="{844ea3f2-6563-424a-a80b-f8b2a0e1b37c}">
      <Declaration><![CDATA[METHOD Update_Spindle_Status : BOOL
VAR_INPUT
	spindleStopped : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[outRobotSpindleStopped := spindleStopped;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Update_Status" Id="{1be56ac6-764b-4729-954d-f7379608e62a}">
      <Declaration><![CDATA[//Updates run status and IOs in Beckhoff system
METHOD Update_Status
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Robot signals
sigs10011008.0 := outRobotTurnMotorOn; // 1001
sigs10011008.1 := outRobotResetError; //1002
sigs10011008.2 := outRobotStartCycle; //1003
sigs10011008.3 := outRobotResetProgram; //1004
sigs10011008.4 := outRobotStartProgram; //1005
sigs10011008.5 := outRobotRunHold; //1006
sigs10011008.6 := outRobotHome; //1007
sigs10011008.7 := outRobotTurnMotorOff; //1008
sigs10091016.0 := outRobotToolReleased; //1009
sigs10091016.1 := outRobotCurrentTool.0; //1010
sigs10091016.2 := outRobotCurrentTool.1; //1011
sigs10091016.3 := outRobotCurrentTool.2; //1012
sigs10091016.4 := outRobotCurrentTool.3; //1013
sigs10091016.5 := outRobotNoEStop; //1014
sigs10091016.7 := outRobotSpindleStopped; //1016
sigs10171024   := outRobotProgramChoice; //1017-1020
sigs10171024.4 := outRobotProgramOption1; //1021
sigs10171024.5 := outRobotProgramOption2; //1022
sigs10171024.6 := outRobotProgramOption3; //1023
sigs10171024.7 := outRobotRequestedTool.0; //1024
sigs10251032.0 := outRobotRequestedTool.1; //1025
sigs10251032.1 := outRobotRequestedTool.2; //1026
sigs10251032.2 := outRobotRequestedTool.3; //1027
sigs10251032.3 := outRobotProgramSelected; //1028
sigs10251032.4 := outRobotGoToCleanupPosition; //1029
sigs10251032.5 := outRobotMoveX; //1030
sigs10251032.6 := outRobotMoveY; //1031
sigs10251032.7 := outRobotMoveZ; //1032
sigs10331040.0 := outRobotMovePositive; //1033
sigs10331040.1 := outRobotBoardWidth51Inches; //1034


inRobotMotorOn := sigs97104.0; //97
inRobotError := sigs97104.1; //98
inRobotAutomaticMode := sigs97104.2; //99
inRobotAtHome := sigs97104.3; //100
inRobotInTeach := sigs97104.4; //101
inRobotCycleStart := sigs97104.5; //102
inRobotPowerOn := sigs97104.6; //103
inRobotPoseDataIsSent := sigs97104.7; //104
inRobotEStopOn := sigs105112.0; //105
inRobotBatteryAlarm := sigs105112.1; //106
inRobotToolNumberCurrent := 0;
inRobotToolNumberCurrent := inRobotToolNumberCurrent OR (BIT_TO_USINT(sigs105112.2) * 1); //107
inRobotToolNumberCurrent := inRobotToolNumberCurrent OR (BIT_TO_USINT(sigs105112.3) * 2); //108
inRobotToolNumberCurrent := inRobotToolNumberCurrent OR (BIT_TO_USINT(sigs105112.4) * 4); //109
inRobotToolNumberCurrent := inRobotToolNumberCurrent OR (BIT_TO_USINT(sigs105112.5) * 8); //110

inRobotToolNumberRequest := 0;
inRobotToolNumberRequest := inRobotToolNumberRequest OR (BIT_TO_USINT(sigs105112.6) * 1); //111
inRobotToolNumberRequest := inRobotToolNumberRequest OR (BIT_TO_USINT(sigs105112.7) * 2); //112
inRobotToolNumberRequest := inRobotToolNumberRequest OR (BIT_TO_USINT(sigs113120.0) * 4); //113
inRobotToolNumberRequest := inRobotToolNumberRequest OR (BIT_TO_USINT(sigs113120.1) * 8); //114
inRobotReleaseTool := sigs113120.2; //115
inRobotProgramRunning := sigs113120.3; // Signal 116
inRobotToolUpdated := sigs113120.4; // Signal 117
inRobotStartofProgram := sigs113120.5; // Signal 118
inRobotCurrentProgram.0 := sigs113120.6;
inRobotCurrentProgram.1 := sigs113120.7;
inRobotCurrentProgram.2 := sigs121128.0;
inRobotCurrentProgram.3 := sigs121128.1;
inRobotAtCleanPosition := sigs121128.2;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Update_Tool" Id="{8cd56187-8f55-4d53-8738-7ee602877016}">
      <Declaration><![CDATA[METHOD Update_Tool : BOOL
VAR_INPUT
	current : USINT;
	request : USINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[outRobotCurrentTool := current;
outRobotRequestedTool := request;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_Robot">
      <LineId Id="9" Count="0" />
      <LineId Id="426" Count="0" />
      <LineId Id="414" Count="1" />
      <LineId Id="420" Count="0" />
      <LineId Id="413" Count="0" />
      <LineId Id="421" Count="0" />
      <LineId Id="423" Count="1" />
      <LineId Id="422" Count="0" />
      <LineId Id="778" Count="0" />
      <LineId Id="780" Count="1" />
      <LineId Id="779" Count="0" />
      <LineId Id="412" Count="0" />
      <LineId Id="428" Count="0" />
      <LineId Id="140" Count="1" />
      <LineId Id="693" Count="0" />
      <LineId Id="316" Count="0" />
      <LineId Id="73" Count="0" />
      <LineId Id="68" Count="1" />
      <LineId Id="71" Count="1" />
      <LineId Id="143" Count="4" />
      <LineId Id="151" Count="1" />
      <LineId Id="155" Count="0" />
      <LineId Id="154" Count="0" />
      <LineId Id="603" Count="5" />
      <LineId Id="149" Count="0" />
    </LineIds>
    <LineIds Name="FB_Robot.EStop_OFF">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Robot.ForceStop_Robot">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Robot.Go_TO_Cleanup">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Robot.Home_Robot">
      <LineId Id="14" Count="0" />
      <LineId Id="12" Count="0" />
    </LineIds>
    <LineIds Name="FB_Robot.Init_Robot">
      <LineId Id="5" Count="3" />
    </LineIds>
    <LineIds Name="FB_Robot.Program_Select">
      <LineId Id="15" Count="2" />
      <LineId Id="5" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="26" Count="0" />
    </LineIds>
    <LineIds Name="FB_Robot.Release_Update">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Robot.Reset_Robot">
      <LineId Id="8" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="32" Count="1" />
      <LineId Id="16" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="38" Count="0" />
    </LineIds>
    <LineIds Name="FB_Robot.Robot_Coords_Match_Tool">
      <LineId Id="5" Count="0" />
      <LineId Id="9" Count="1" />
      <LineId Id="18" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="21" Count="1" />
      <LineId Id="20" Count="0" />
    </LineIds>
    <LineIds Name="FB_Robot.Robot_Manual_Control">
      <LineId Id="16" Count="3" />
    </LineIds>
    <LineIds Name="FB_Robot.RunHold_Robot">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Robot.Start_Robot">
      <LineId Id="10" Count="1" />
    </LineIds>
    <LineIds Name="FB_Robot.Stop_Robot_Program">
      <LineId Id="11" Count="0" />
      <LineId Id="17" Count="2" />
      <LineId Id="29" Count="0" />
      <LineId Id="24" Count="0" />
    </LineIds>
    <LineIds Name="FB_Robot.Turn_Off_Program_Selected">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Robot.Update_Pose">
      <LineId Id="6" Count="0" />
      <LineId Id="36" Count="4" />
      <LineId Id="19" Count="0" />
      <LineId Id="260" Count="0" />
      <LineId Id="74" Count="0" />
      <LineId Id="261" Count="0" />
      <LineId Id="75" Count="0" />
      <LineId Id="253" Count="0" />
      <LineId Id="237" Count="0" />
      <LineId Id="258" Count="0" />
      <LineId Id="238" Count="0" />
      <LineId Id="240" Count="0" />
      <LineId Id="239" Count="0" />
      <LineId Id="255" Count="0" />
      <LineId Id="254" Count="0" />
      <LineId Id="256" Count="1" />
      <LineId Id="250" Count="1" />
      <LineId Id="247" Count="2" />
      <LineId Id="242" Count="0" />
      <LineId Id="252" Count="0" />
      <LineId Id="103" Count="0" />
      <LineId Id="306" Count="0" />
      <LineId Id="363" Count="0" />
      <LineId Id="307" Count="0" />
      <LineId Id="362" Count="0" />
      <LineId Id="361" Count="0" />
      <LineId Id="308" Count="3" />
      <LineId Id="316" Count="1" />
      <LineId Id="315" Count="0" />
      <LineId Id="305" Count="0" />
      <LineId Id="49" Count="1" />
      <LineId Id="72" Count="0" />
      <LineId Id="407" Count="1" />
      <LineId Id="73" Count="0" />
      <LineId Id="12" Count="0" />
    </LineIds>
    <LineIds Name="FB_Robot.Update_Spindle_Status">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Robot.Update_Status">
      <LineId Id="18" Count="0" />
      <LineId Id="31" Count="6" />
      <LineId Id="104" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="103" Count="0" />
      <LineId Id="115" Count="1" />
      <LineId Id="149" Count="0" />
      <LineId Id="110" Count="0" />
      <LineId Id="122" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="94" Count="2" />
      <LineId Id="127" Count="2" />
      <LineId Id="152" Count="0" />
      <LineId Id="139" Count="0" />
      <LineId Id="157" Count="0" />
      <LineId Id="163" Count="3" />
      <LineId Id="176" Count="0" />
      <LineId Id="162" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="55" Count="6" />
      <LineId Id="54" Count="0" />
      <LineId Id="63" Count="1" />
      <LineId Id="78" Count="0" />
      <LineId Id="84" Count="2" />
      <LineId Id="150" Count="0" />
      <LineId Id="88" Count="4" />
      <LineId Id="151" Count="0" />
      <LineId Id="74" Count="0" />
      <LineId Id="62" Count="0" />
      <LineId Id="144" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="177" Count="4" />
    </LineIds>
    <LineIds Name="FB_Robot.Update_Tool">
      <LineId Id="5" Count="0" />
      <LineId Id="8" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>