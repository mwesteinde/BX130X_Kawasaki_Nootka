<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_GantryHoldDown" Id="{212016f5-1181-4eaa-b089-a8c72c29c00d}" SpecialFunc="None">
    <Declaration><![CDATA[//TODO: set methods to enable all following, pneumatic cylinder activation, error handling

FUNCTION_BLOCK FB_GantryHoldDown
VAR_OUTPUT
END_VAR
VAR
	
	testLight : BOOL;
	//MC_functions, called in methods
	fbMC_PowerWest		: MC_Power;
	fbMC_PowerEast		: MC_Power;
	fbMC_HomeWest		: MC_Home;
	fbMC_HomeEast		: MC_Home;
	fbMC_MoveAbsWest1	: MC_MoveAbsolute;
	fbMC_MoveAbsWest2	: MC_MoveAbsolute;
	fbMC_MoveVelocity	: MC_MoveVelocity;
	fbMC_SyncAxes		: MC_GearIn;
	fbMC_DecoupleAxes	: MC_GearOut;
	fbReadStatus		: MC_ReadStatus;
	fbMC_Stop			: MC_Stop;
	fbMC_Halt			: MC_HALT;
	Aborting			: MC_BufferMode;
	fbMC_Reset			: MC_Reset;
	fbSOEReset			: FB_SoEReset;
	
	//Inputs
	ls1NE AT %I* 		: BOOL;
	ls3NW AT %I* 		: BOOL;
	
	//Pneumatic cylinders
	cylindersNorth 			AT %Q* : BOOL;
	cylindersCentreNorth	AT %Q* : BOOL;
	cylindersCentreSouth	AT %Q* : BOOL;
	cylindersSouth			AT %Q* : BOOL;
	pressureSwitchSpindle	AT %I* : BOOL;
	pressureSwitchHoldDown	AT %I* : BOOL;
	pressureSwitchTableClamps AT %I* : BOOL;
	pressureSwitchTimer : TON;
	allRollersLowered : BOOL;
	
	// laser feedback
	westLaserDistanceRaw AT %I* : INT;
	eastLaserDistanceRaw AT %I* : INT;
	eastDisplay : LREAL;
	westDisplay : LREAL;
	eastLaserErrorCount : INT := 0; //Counts times in a row eastLaser position is off
	westLaserErrorCount : INT := 0; //Counts times in a row westLaser position is off
	maxWestLaserErrorCount : INT := 0;
	maxEastLaserErrorCount : INT := 0;
	positionMaxWestLaserErrorCount : ARRAY[0..1] OF LREAL;
	positionMaxEastLaserErrorCount : ARRAY[0..1] OF LREAL;
	
	//Pneumatic switches
	
	rollersReady		: BOOL;
	eastGantryHoming	: BOOL := FALSE; //Set to true for when east gantry is homing
	lengthWood 			: LREAL := 2133; //mm, length of wood being clamped variable changed by toggle on selectprogram screen;
	
	// Enable bools
	executeEnable		: BOOL := FALSE;
	executeHomeWest 	: BOOL := FALSE;
	executeHomeEast		: BOOL := FALSE;
	executeCouple 		: BOOL := FALSE;
	executeDecouple		: BOOL := FALSE;
	executeCylinders	: BOOL := FALSE;
	followVariable		: BOOL:= TRUE; //Set for following robot
	stopGantry			: BOOL := FALSE;
	resetExec			: BOOL := FALSE;
	executeManualMove		: BOOL;
	executeHalt			: BOOL;
	manualMoveDirection 		: MC_Direction;
	rTrigHomeWestDone	: R_TRIG;
	
	//CSV variables
	bWrite			: BOOL := FALSE;(* Rising edge starts program execution *)
	sNetId			: T_AmsNetId := '';	(* TwinCAT system network address *)
	sFileName		: T_MaxString := 'C:\laserServo5mms.csv';(* CSV destination file path and name *)
	sCSVLine		: T_MaxString := '';(* Single CSV text line (row, record), we are using string as record buffer (your are able to see created fields) *)
	sCSVField		: T_MaxString := '';(* Single CSV field value (column, record field) *)
	bBusy			: BOOL;
	bError			: BOOL;
	nErrId			: UDINT;
	nRow	 		: UDINT 	:= 0;(* Row number (record) *)
	nColumn			: UDINT 	:= 0;(* Column number (record field) *)
	hFile			: UINT		:= 0;(* File handle of the source file *)
	step			: DWORD 	:= 0;
	fbFileOpen		: FB_FileOpen;(* Opens file *)
	fbFileClose		: FB_FileClose;(* Closes file *)
	fbFilePuts		: FB_FilePuts;(* Writes one record (line) *)
	fbWriter		: FB_CSVMemBufferWriter;(* Helper function block used to create CSV data bytes (single record line) *)
	startCount : BOOL := FALSE;
	rowIndex		: INT := 0;
	counterCycles	: INT := 0;
	cycleModulus : INT := 1;
	csvRows		: INT := 1200;

	database		: ARRAY[0..MAX_CSV_ROWS, 0..MAX_CSV_COLUMNS ] OF STRING(MAX_CSV_FIELD_LENGTH);
END_VAR
VAR CONSTANT
	MAX_CSV_ROWS    : INT :=10000;
	MAX_CSV_COLUMNS : INT :=6;
	MAX_CSV_FIELD_LENGTH : INT := 100;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[GVL_Axes.AxisWest.ReadStatus();
GVL_Axes.AxisEast.ReadStatus();
Servo_Feedback_Ok();

//CSV_Writer(); //To write database of laser values to CSV

allRollersLowered := NOT(cylindersNorth OR cylindersCentreNorth OR cylindersCentreSouth OR cylindersSouth); 
rTrigHomeWestDone(CLK := fbMC_HomeWest.Done);
// Movement functions
Servo_Commands();
// Enable and couple axes
executeEnable := TRUE;
IF GVL_Axes.AxisEast.NcToPlc.CoupleState <> 3 AND NOT fbMC_HomeEast.Busy AND NOT fbMC_DecoupleAxes.Busy THEN
	executeCouple := NOT executeCouple;
END_IF]]></ST>
    </Implementation>
    <Method Name="CSV_Writer" Id="{f9e266aa-d592-4fb5-9501-ba9af6944160}">
      <Declaration><![CDATA[METHOD CSV_Writer : BOOL
(* Writing of CSV file in text mode. None of the field value is containing any non-printing control characters like line feed, carriage return, quotation marks, semicolon... *)
VAR
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE step OF
	0:	(* Wait for rising edge at bWrite variable *)
		IF bWrite THEN
			bWrite 	:= FALSE;
			bBusy 	:= TRUE;
			bError	:= FALSE;
			nErrId	:= 0;
			hFile	:= 0;
			nRow	:= 0;
			nColumn	:= 0;
			step 	:= 1;
		END_IF

	1:	(* Open source file *)
		fbFileOpen(  bExecute := FALSE  );
		fbFileOpen( sNetId := sNetId, sPathName := sFileName, nMode := FOPEN_MODEWRITE OR FOPEN_MODETEXT,(* Open file in TEXT mode! *)
					ePath := PATH_GENERIC, bExecute := TRUE );
		step := 2;

	2:(* Wait until open not busy *)
		fbFileOpen( bExecute := FALSE, bError => bError, nErrID => nErrID, hFile => hFile );
		IF NOT fbFileOpen.bBusy THEN
			IF NOT fbFileOpen.bError THEN
				step := 3;
			ELSE(* Error: file not found? *)
				step := 100;
			END_IF
		END_IF

	3:(* Convert one PLC record to CSV format *)
		sCSVLine := '';
		fbWriter.eCmd := eEnumCmd_First;(* Write first field value *)
		IF nRow <= csvRows THEN

			FOR nColumn := 0 TO MAX_CSV_COLUMNS BY 1 DO

				sCSVField := STRING_TO_CSVFIELD( database[ nRow, nColumn ], FALSE );(* TODO: Get field value from your application *)

				(* Add new field to the record buffer *)
				fbWriter( 	pBuffer := ADR( sCSVLine ), cbBuffer := SIZEOF( sCSVLine ) - 1, putValue := sCSVField, pValue := 0, cbValue := 0,
							bCRLF := ( nColumn = MAX_CSV_COLUMNS ) );(* bCRLF == TRUE => Write CRLF after the last field value *)
				IF fbWriter.bOk THEN
					fbWriter.eCmd := eEnumCmd_Next;(* Write next field value *)
				ELSE(* Error *)
					step := 100;
					RETURN;
				END_IF

			END_FOR(* FOR nColumn := 0... *)

			(* FB_FilePuts adds allready CR (carriage return) to the written line.
			We have to replace the $R$L characters with $L character to avoid double CR. *)
			IF RIGHT( sCSVLine, 2 ) = '$R$L' THEN
				sCSVLine := REPLACE( sCSVLine, '$L', 2, LEN( sCSVLine ) - 1 );
			END_IF

			nRow := nRow + 1;(* Increment number of created records (rows) *)
			step := 4;(* Write record to the file *)

		ELSE(* All rows written => Close file *)
			step := 10;
		END_IF

	4:	(* Write single text line *)
		fbFilePuts( bExecute := FALSE );
		fbFilePuts( sNetId := sNetId, hFile := hFile, sLine := sCSVLine, bExecute := TRUE );
		step := 5;

	5:(* Wait until write not busy *)
		fbFilePuts( bExecute := FALSE, bError => bError, nErrID => nErrID );
		IF NOT fbFilePuts.bBusy THEN
			IF NOT fbFilePuts.bError THEN
				step := 3;(* Write next record *)
			ELSE(* Error *)
				step := 100;
			END_IF
		END_IF

	10:	(* Close source file *)
		fbFileClose( bExecute := FALSE );
		fbFileClose( sNetId := sNetId, hFile := hFile, bExecute := TRUE );
		step := 11;

	11:(* Wait until close not busy *)
		fbFileClose( bExecute := FALSE, bError => bError, nErrID => nErrID );
		IF ( NOT fbFileClose.bBusy ) THEN
			hFile := 0;
			step := 100;
		END_IF

	100: (* Error or ready step => cleanup *)
		IF ( hFile <> 0 ) THEN
			step := 10; (* Close the source file *)
		ELSE
			bBusy := FALSE;
			step := 0;	(* Ready *)
		END_IF

END_CASE

]]></ST>
      </Implementation>
    </Method>
    <Method Name="Cylinder_Set_Cutting" Id="{80c33305-3d27-491c-90ce-c1e0d842bbab}">
      <Declaration><![CDATA[METHOD Cylinder_Set_Cutting
VAR_INPUT
END_VAR
VAR
	POS_CYLINDER_NORTH : LREAL := 74;//74 //mm, position of north pneum cylinder relative to gantry plate
	POS_CYLINDER_NORTHCENTRE : LREAL := 229.62;//229.62 //mm, position of centre north pneum cylinder relative to gantry plate
	POS_CYLINDER_SOUTHCENTRE : LREAL := 811.78; //mm, position of centre south pneum cylinder relative to gantry plate
	POS_CYLINDER_SOUTH : LREAL := 967.40; //mm, position of south pneum cylinder relative to gantry plate
	POS_TABLE_NORTH : LREAL := 474.14; //mm, position of table start WRT Zero
	FACTOR_OF_SAFETY : LREAL := 100; //mm, distance from edge of table cylinders will rise
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF GVL_Axes.AxisWest.NcToPlc.ActPos < POS_TABLE_NORTH + FACTOR_OF_SAFETY - POS_CYLINDER_NORTH THEN
	cylindersNorth := 1;
ELSE
	cylindersNorth := 0;
END_IF

IF GVL_Axes.AxisWest.NcToPlc.ActPos < POS_TABLE_NORTH + FACTOR_OF_SAFETY - POS_CYLINDER_NORTHCENTRE THEN
	cylindersCentreNorth := 1;
ELSE
	cylindersCentreNorth := 0;
END_IF

IF GVL_Axes.AxisWest.NcToPlc.ActPos > POS_TABLE_NORTH + lengthWood - FACTOR_OF_SAFETY - POS_CYLINDER_SOUTH THEN
	cylindersSouth := 1;
ELSE
	cylindersSouth := 0;
END_IF

IF GVL_Axes.AxisWest.NcToPlc.ActPos > POS_TABLE_NORTH + lengthWood - FACTOR_OF_SAFETY - POS_CYLINDER_SOUTHCENTRE THEN
		cylindersCentreSouth := 1;
ELSE 
		cylindersCentreSouth := 0;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Follow_Robot" Id="{56fb3307-d26a-436e-8a13-67eb97620809}">
      <Declaration><![CDATA[METHOD Follow_Robot : ARRAY[0..1] OF BOOL //Index 0 returns false if dust boot is within one follow threshold length of rollersw threshold), true if it is. Index 1 returns True if the robot is below rollers and outside of the rollers
VAR_INPUT
	robotPoseGantry : Structure_RobotPose;
END_VAR

VAR
	targetPosition: LREAL;
	positionNorthCornerDustBoot: LREAL;
	positionSouthCornerDustBoot: LREAL;
	accel: LREAL:=600;
	decel: LREAL:=600;
	jer:   LREAL:=1200;
	vel: LREAL:= 170;
	
	dustBootBottom : INT := 20;
	dustBootLeft : INT := 20;
	dustBootRight : INT := 20;
	dustBootTop : INT := 20;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Set target position to middle of robot tool
targetPosition := (robotPoseGantry.yPose - GVL_SERVO_ROBOT_CONST.MIN_POS_ROBOT) * GVL_SERVO_ROBOT_CONST.DIFFERENCE_SERVOWEST/GVL_SERVO_ROBOT_CONST.DIFFERENCE_ROBOT;
positionNorthCornerDustBoot := (robotPoseGantry.yPoseDustBootNorth - GVL_SERVO_ROBOT_CONST.MIN_POS_ROBOT) * GVL_SERVO_ROBOT_CONST.DIFFERENCE_SERVOWEST/GVL_SERVO_ROBOT_CONST.DIFFERENCE_ROBOT;
positionSouthCornerDustBoot := (robotPoseGantry.yPoseDustBootSouth - GVL_SERVO_ROBOT_CONST.MIN_POS_ROBOT) * GVL_SERVO_ROBOT_CONST.DIFFERENCE_SERVOWEST/GVL_SERVO_ROBOT_CONST.DIFFERENCE_ROBOT;

//Checking if robot is too far away from rollers and above rollers - will hold robot if so
IF (positionNorthCornerDustBoot < (GVL_Axes.AxisWest.NcToPlc.ActPos - GVL_SERVO_ROBOT_CONST.INNER_ROLLERS_SPACING/2 + GVL_SERVO_ROBOT_CONST.FOLLOW_THRESHOLD) OR 
	positionSouthCornerDustBoot > (GVL_Axes.AxisWest.NcToPlc.ActPos + GVL_SERVO_ROBOT_CONST.INNER_ROLLERS_SPACING/2 - GVL_SERVO_ROBOT_CONST.FOLLOW_THRESHOLD)) 
	AND (robotPoseGantry.zPose < GVL_SERVO_ROBOT_CONST.ROLLERS_Z_HEIGHT) THEN
	Follow_Robot[0] := FALSE; //Gantry isn't following, hold robot
ELSE
	Follow_Robot[0] := TRUE; //Gantry is following properly, keep robot on run
END_IF

//Checking if robot is below rollers and on the outside of rollers
IF robotPoseGantry.zPose < GVL_SERVO_ROBOT_CONST.ROLLERS_Z_HEIGHT - 50 AND (positionNorthCornerDustBoot > (GVL_Axes.AxisWest.NcToPlc.ActPos + GVL_SERVO_ROBOT_CONST.INNER_ROLLERS_SPACING/2 + GVL_SERVO_ROBOT_CONST.FOLLOW_THRESHOLD) OR positionSouthCornerDustBoot < (GVL_Axes.AxisWest.NcToPlc.ActPos - GVL_SERVO_ROBOT_CONST.INNER_ROLLERS_SPACING/2 - GVL_SERVO_ROBOT_CONST.FOLLOW_THRESHOLD)) THEN
	Follow_Robot[1] := TRUE;
ELSE
	Follow_Robot[1] := FALSE;
END_IF

IF targetPosition < GVL_SERVO_ROBOT_CONST.MIN_POS_SERVOWEST THEN
	targetPosition := GVL_SERVO_ROBOT_CONST.MIN_POS_SERVOWEST;
ELSIF targetPosition > GVL_SERVO_ROBOT_CONST.MAX_POS_SERVOWEST THEN
	targetPosition := GVL_SERVO_ROBOT_CONST.MAX_POS_SERVOWEST;
END_IF

followVariable := NOT followVariable;

IF GVL_Axes.AxisWest.Status.Homed AND GVL_Axes.AxisEast.NcToPlc.CoupleState = 3 THEN
	fbMC_MoveAbsWest1(
		Axis:= GVL_Axes.AxisWest, 
		Execute:= followVariable, 
		Position:= targetPosition, 
		Velocity:= vel,
		Acceleration:= accel, 
		Deceleration:= decel,
		Jerk:= jer, 
		BufferMode:= Aborting);
	
	fbMC_MoveAbsWest2(
		Axis:= GVL_Axes.AxisWest, 
		Execute:= NOT followVariable, 
		Position:= targetPosition, 
		Velocity:= vel,
		Acceleration:= accel, 
		Deceleration:= decel,
		Jerk:= jer, 
		BufferMode:= Aborting);
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Gantry_Follow_Error" Id="{3bf528b2-7bd3-4e86-b29d-60ca1932044b}">
      <Declaration><![CDATA[METHOD Gantry_Follow_Error : BOOL
VAR_INPUT
	robotPoseGantry : Structure_RobotPose;
	allRollersLowered : BOOL;
	rollersInFollow : BOOL; //If follow robot is activated, 
END_VAR
VAR
	positionNorthCornerDustBoot: REAL;
	positionSouthCornerDustBoot: REAL;
	heightThreshold : REAL;
	northRollersNorthEdge : REAL;
	northRollersSouthEdge : REAL;
	southRollersNorthEdge : REAL;
	southRollersSouthEdge : REAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[positionNorthCornerDustBoot := (robotPoseGantry.yPoseDustBootNorth - GVL_SERVO_ROBOT_CONST.MIN_POS_ROBOT) * GVL_SERVO_ROBOT_CONST.DIFFERENCE_SERVOWEST/GVL_SERVO_ROBOT_CONST.DIFFERENCE_ROBOT;
positionSouthCornerDustBoot := (robotPoseGantry.yPoseDustBootSouth - GVL_SERVO_ROBOT_CONST.MIN_POS_ROBOT) * GVL_SERVO_ROBOT_CONST.DIFFERENCE_SERVOWEST/GVL_SERVO_ROBOT_CONST.DIFFERENCE_ROBOT;

IF allRollersLowered THEN
	heightThreshold := GVL_SERVO_ROBOT_CONST.ROLLERS_Z_HEIGHT_LOWERED + GVL_SERVO_ROBOT_CONST.FOLLOW_THRESHOLD;
ELSE
	heightThreshold := GVL_SERVO_ROBOT_CONST.ROLLERS_Z_HEIGHT_RAISED + GVL_SERVO_ROBOT_CONST.FOLLOW_THRESHOLD;	
END_IF

northRollersNorthEdge := GVL_Axes.AxisWest.NcToPlc.ActPos - GVL_SERVO_ROBOT_CONST.OUTER_ROLLERS_SPACING/2;
northRollersSouthEdge := GVL_Axes.AxisWest.NcToPlc.ActPos - GVL_SERVO_ROBOT_CONST.INNER_ROLLERS_SPACING/2;
southRollersNorthEdge := GVL_Axes.AxisWest.NcToPlc.ActPos + GVL_SERVO_ROBOT_CONST.INNER_ROLLERS_SPACING/2;
southRollersSouthEdge := GVL_Axes.AxisWest.NcToPlc.ActPos + GVL_SERVO_ROBOT_CONST.OUTER_ROLLERS_SPACING/2;

IF rollersInFollow THEN
	//Checking if robot is too far away from rollers and below rollers - TODO: stop robot if past
	IF ((positionNorthCornerDustBoot < northRollersSouthEdge OR positionSouthCornerDustBoot > southRollersNorthEdge) AND (robotPoseGantry.zPose < heightThreshold)) THEN
		Gantry_Follow_Error := TRUE;
	ELSE
		Gantry_Follow_Error := FALSE;
	END_IF
ELSE
	IF positionSouthCornerDustBoot < (northRollersNorthEdge - GVL_SERVO_ROBOT_CONST.FOLLOW_THRESHOLD) OR
		(positionNorthCornerDustBoot > (northRollersSouthEdge + GVL_SERVO_ROBOT_CONST.FOLLOW_THRESHOLD) AND positionSouthCornerDustBoot < (southRollersNorthEdge - GVL_SERVO_ROBOT_CONST.FOLLOW_THRESHOLD)) OR
		positionNorthCornerDustBoot > (southRollersSouthEdge + GVL_SERVO_ROBOT_CONST.FOLLOW_THRESHOLD) THEN
		Gantry_Follow_Error := FALSE;
	ELSE
		Gantry_Follow_Error := TRUE;
	END_IF
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Home_Servos" Id="{40c1f2ee-aae6-427c-ae6f-0159b8da9b8e}">
      <Declaration><![CDATA[//Enables, couples and homes hold down gantry
//Returns True if can sucessfully home, false if robot too low
METHOD Home_Servos : Structure_Error
VAR_INPUT
	robotPose	: Structure_RobotPose;
END_VAR

VAR

END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF robotPose.zPose > GVL_SERVO_ROBOT_CONST.ROLLERS_Z_HEIGHT THEN
	//Home Axes
	IF GVL_Axes.AxisEast.NcToPlc.CoupleState = 3 THEN
		executeHomeWest := TRUE;
		Home_Servos.isError := FALSE;
		Home_Servos.errorMessage := 'No Error';
	ELSE
		Home_Servos.isError := TRUE;
		Home_Servos.errorMessage := 'Axis not coupled properly';
	END_IF
ELSE
	Home_Servos.isError := TRUE;
	Home_Servos.errorMessage := 'Robot too low to home';
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Lower_Raise_Rollers" Id="{be41d060-f784-4b54-8d63-d2871638718b}">
      <Declaration><![CDATA[METHOD Lower_Raise_Rollers
VAR_INPUT
	raiseRollers	: BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[cylindersNorth 			:= raiseRollers;
cylindersCentreNorth	:= raiseRollers;
cylindersCentreSouth 	:= raiseRollers;
cylindersSouth 			:= raiseRollers;

]]></ST>
      </Implementation>
    </Method>
    <Method Name="Manual_Move_Servos" Id="{e5d33aa5-ce68-4cba-87a3-93bc18020780}">
      <Declaration><![CDATA[METHOD Manual_Move_Servos : BOOL
VAR_INPUT
	direction : INT; //1 for south, -1 for north
	moveServos : BOOL; //True to move
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF moveServos AND GVL_Axes.AxisEast.NcToPlc.CoupleState = 3 THEN
	IF direction = -1 THEN
		manualMoveDirection := MC_Negative_Direction;
	ELSE
		manualMoveDirection := MC_Positive_Direction;
	END_IF
	
	executeHalt := FALSE;
	executeManualMove := TRUE;
ELSE
	executeHalt := TRUE;
	executeManualMove := FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Pneumatics_Error" Id="{53ecf6cd-303e-4078-9884-7bcc9af1828f}">
      <Declaration><![CDATA[METHOD Pneumatics_Error : Structure_Error
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Pneumatics_Error.errorMessage := '';

IF NOT (pressureSwitchSpindle AND  pressureSwitchHoldDown AND pressureSwitchTableClamps) THEN
	pressureSwitchTimer(IN:= TRUE, PT:=T#5S);
ELSE
	pressureSwitchTimer(IN:= FALSE, PT:=T#5S);
END_IF


IF NOT pressureSwitchTimer.Q THEN
	Pneumatics_Error.isError := FALSE;
ELSE
	Pneumatics_Error.isError := TRUE;
	IF NOT pressureSwitchSpindle THEN
		Pneumatics_Error.errorMessage := CONCAT(Pneumatics_Error.errorMessage, '\nPressure Switch Spindle Off');
	END_IF
	IF NOT pressureSwitchHoldDown THEN
		Pneumatics_Error.errorMessage := CONCAT(Pneumatics_Error.errorMessage, '\nPressure Switch HoldDown Off');
	END_IF
	IF NOT pressureSwitchTableClamps THEN
		Pneumatics_Error.errorMessage := CONCAT(Pneumatics_Error.errorMessage, '\nPressure Switch Table Clamps Off');
	END_IF
END_IF

]]></ST>
      </Implementation>
    </Method>
    <Method Name="Reset_Servos" Id="{a5d370ca-8c90-416a-969e-b60ae3e560f6}">
      <Declaration><![CDATA[//Resets servo errors
METHOD Reset_Servos : BOOL // Returns true if errors reset successfully
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[stopGantry := FALSE;
resetExec := TRUE;

Reset_Servos := NOT GVL_Axes.AxisWest.Status.Error;
IF Reset_Servos THEN
	resetExec := FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Servo_Commands" Id="{e822ca69-a3df-402b-82d4-4917018968fd}">
      <Declaration><![CDATA[//All the servo motions. Triggered in separate methods by their execute flags
METHOD Servo_Commands
VAR_INPUT
END_VAR

VAR
	Execute: BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Enable Axes
fbMC_PowerWest(
	Axis:= GVL_Axes.AxisWest, 
	Enable:= executeEnable, 
	Enable_Positive:= executeEnable, 
	Enable_Negative:= executeEnable, 
	Override:= 100.0);
		
fbMC_PowerEast(
	Axis:= GVL_Axes.AxisEast, 
	Enable:= executeEnable, 
	Enable_Positive:= executeEnable, 
	Enable_Negative:= executeEnable, 
	Override:= 100.0);
	
//Couple Axes
fbMC_SyncAxes(
	Master:= GVL_Axes.AxisWest, 
	Slave:= GVL_Axes.AxisEast, 
	Execute:= executeCouple, 
	RatioNumerator:= 1);

//Home
fbMC_HomeWest(
	Axis:= GVL_Axes.AxisWest, 
	Execute:= executeHomeWest AND GVL_Axes.AxisEast.NcToPlc.CoupleState = 3, //Make sure that axes are coupled before homing
	Position:= GVL_SERVO_ROBOT_CONST.POSITION_LIMIT_SWITCH, 
	HomingMode:= MC_DefaultHoming, 
	bCalibrationCam:= NOT ls3NW);

//When west axis homing complete, turn off homewest trigger so that it can be activated again
IF fbMC_HomeWest.Done THEN 
	executeHomeWest := FALSE;
END_IF

//When west axis hming complete, enable east home and decouple triggers
IF rTrigHomeWestDone.Q THEN 
	executeHomeEast := TRUE;
	executeDecouple := TRUE;
END_IF

//Decouple axes to allow east axis to home
fbMC_DecoupleAxes(
	Slave	:= GVL_Axes.AxisEast,
	Execute	:= executeDecouple);

//Home east axis once axes are decoupled
fbMC_HomeEast(
	Axis:= GVL_Axes.AxisEast, 
	Execute:= executeHomeEast AND fbMC_DecoupleAxes.Done, 
	Position:= GVL_SERVO_ROBOT_CONST.POSITION_LIMIT_SWITCH, 
	HomingMode:= MC_DefaultHoming, 
	bCalibrationCam:= NOT ls1NE);

IF fbMC_HomeEast.Done THEN //Turn off home east and decouple triggers once home east is done, so can activate again
	executeHomeEast := FALSE;
	executeDecouple := FALSE;
END_IF

fbMC_MoveVelocity(
	Axis := GVL_Axes.AxisWest, 
   	Execute := executeManualMove, 
	Velocity := 50,
Direction :=  manualMoveDirection);

fbMC_Halt(
	Axis := GVL_Axes.AxisWest,
	Execute := executeHalt);
	
//Stop
fbMC_Stop(
	Axis:= GVL_Axes.AxisWest, 
	Execute:= stopGantry, 
	);
	
//Reset
fbMC_Reset(
	Axis := GVL_Axes.AxisWest,
	Execute := ResetExec);
	
	fbMC_Reset(
	Axis := GVL_Axes.AxisEast,
	Execute := ResetExec);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Servo_Feedback_Ok" Id="{ca3627b1-0886-4bf3-93a4-0c36fc747e85}">
      <Declaration><![CDATA[METHOD Servo_Feedback_Ok : BOOL;
VAR
	eastLaserDistanceMM : LREAL;
	westLaserDistanceMM : LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[(*	 West segments. Found by logging laser raw vaues compared to servo values and generating stepwise matcing function with this pyton script: https://colab.research.google.com/drive/1Y94awcyMlDvm36SadoFhQ90GHG-RgMbE?usp=sharing
Segment 1: y = 0.0752 * x + 4.1635 for 513.0 <= x <= 2752.0
Segment 2: y = 0.0744 * x + 5.1779 for 2764.0 <= x <= 5171.0
Segment 3: y = 0.0782 * x + -19.3787 for 5189.0 <= x <= 7711.0
Segment 4: y = 0.0760 * x + -1.5012 for 7726.0 <= x <= 10374.0
Segment 5: y = 0.0748 * x + 14.5548 for 10393.0 <= x <= 13260.0
Segment 6: y = 0.0775 * x + -19.1401 for 13268.0 <= x <= 16313.0
Segment 7: y = 0.0761 * x + 0.8288 for 16337.0 <= x <= 19469.0
Segment 8: y = 0.0766 * x + -10.5501 for 19492.0 <= x <= 22646.0
Segment 9: y = 0.0762 * x + -1.3316 for 22666.0 <= x <= 25786.0
Segment 10: y = 0.0738 * x + 62.2617 for 25802.0 <= x <= 27665.0*)

//West distance:
IF westLaserDistanceRaw < 513 THEN
	westLaserDistanceMM := GVL_Axes.AxisWest.NcToPlc.ActPos; //At start laser is not linear
ELSIF westLaserDistanceRaw < 2752 THEN
    westLaserDistanceMM := 0.0752 * westLaserDistanceRaw + 4.1635;
ELSIF westLaserDistanceRaw < 5171 THEN
    westLaserDistanceMM := 0.0744 * westLaserDistanceRaw + 5.1779;
ELSIF westLaserDistanceRaw < 7711 THEN
    westLaserDistanceMM := 0.0782 * westLaserDistanceRaw + -19.3787;
ELSIF westLaserDistanceRaw < 10374 THEN
    westLaserDistanceMM := 0.0760 * westLaserDistanceRaw + -1.5012;
ELSIF westLaserDistanceRaw < 13260 THEN
    westLaserDistanceMM := 0.0748 * westLaserDistanceRaw + 14.5548;
ELSIF westLaserDistanceRaw < 16313 THEN
    westLaserDistanceMM := 0.0775 * westLaserDistanceRaw + -19.1401;
ELSIF westLaserDistanceRaw < 19469 THEN
    westLaserDistanceMM := 0.0761 * westLaserDistanceRaw + 0.8288;
ELSIF westLaserDistanceRaw < 22646 THEN
    westLaserDistanceMM := 0.0766 * westLaserDistanceRaw + -10.5501;
ELSIF westLaserDistanceRaw < 25786 THEN
    westLaserDistanceMM := 0.0762 * westLaserDistanceRaw + -1.3316;
ELSIF westLaserDistanceRaw <= 27665 THEN
    westLaserDistanceMM := 0.0738 * westLaserDistanceRaw + 62.2617;
ELSE
	westLaserDistanceMM := GVL_Axes.AxisWest.NcToPlc.ActPos; //At ends laser is less reliable
END_IF

(*	 East segments. Found by logging laser raw vaues compared to servo values and generating stepwise matcing function with this pyton script: https://colab.research.google.com/drive/1Y94awcyMlDvm36SadoFhQ90GHG-RgMbE?usp=sharing
Segment 1: y = 0.0765 * x + 5.3461 for 512.0 <= x <= 3356.0
Segment 2: y = 0.0717 * x + 20.8508 for 3367.0 <= x <= 6278.0
Segment 3: y = 0.0766 * x + -4.5129 for 6298.0 <= x <= 9309.0
Segment 4: y = 0.0758 * x + 2.6925 for 9316.0 <= x <= 12407.0
Segment 5: y = 0.0784 * x + -32.3308 for 12422.0 <= x <= 15408.0
Segment 6: y = 0.0753 * x + 15.0025 for 15425.0 <= x <= 18194.0
Segment 7: y = 0.0739 * x + 41.3383 for 18209.0 <= x <= 20818.0
Segment 8: y = 0.0762 * x + -2.3633 for 20855.0 <= x <= 23436.0
Segment 9: y = 0.0770 * x + -24.5967 for 23454.0 <= x <= 26111.0
Segment 10: y = 0.0733 * x + 74.9176 for 26122.0 <= x <= 27668.0
*)
IF eastLaserDistanceRaw < 512 THEN
	eastLaserDistanceMM := GVL_Axes.AxisEast.NcToPlc.ActPos; //At start laser is not linear
ELSIF eastLaserDistanceRaw < 3356 THEN
    eastLaserDistanceMM := 0.0765 * eastLaserDistanceRaw + 5.3461;
ELSIF eastLaserDistanceRaw < 6278 THEN
    eastLaserDistanceMM := 0.0717 * eastLaserDistanceRaw + 20.8508;
ELSIF eastLaserDistanceRaw < 9309 THEN
    eastLaserDistanceMM := 0.0766 * eastLaserDistanceRaw + -4.5129;
ELSIF eastLaserDistanceRaw < 12407 THEN
    eastLaserDistanceMM := 0.0758 * eastLaserDistanceRaw + 2.6925;
ELSIF eastLaserDistanceRaw < 15408 THEN
    eastLaserDistanceMM := 0.0784 * eastLaserDistanceRaw + -32.3308;
ELSIF eastLaserDistanceRaw < 18194 THEN
    eastLaserDistanceMM := 0.0753 * eastLaserDistanceRaw + 15.0025;
ELSIF eastLaserDistanceRaw < 20818 THEN
    eastLaserDistanceMM := 0.0739 * eastLaserDistanceRaw + 41.3383;
ELSIF eastLaserDistanceRaw < 23436 THEN
    eastLaserDistanceMM := 0.0762 * eastLaserDistanceRaw + -2.3633;
ELSIF eastLaserDistanceRaw < 26111 THEN
    eastLaserDistanceMM := 0.0770 * eastLaserDistanceRaw + -24.5967;
ELSIF eastLaserDistanceRaw <= 27668 THEN
    eastLaserDistanceMM := 0.0733 * eastLaserDistanceRaw + 74.9176;
ELSE
	eastLaserDistanceMM := GVL_Axes.AxisEast.NcToPlc.ActPos;
END_IF

			
eastDisplay := eastLaserDistanceMM;
westDisplay := westLaserDistanceMM;

//Comparing laser distance value to servo feedback. If off by more than threshold, start counting how many times in a row this happens
IF GVL_Axes.AxisWest.Status.Homed AND GVL_Axes.AxisEast.Status.Homed THEN
	IF ABS(westLaserDistanceMM - GVL_Axes.AxisWest.NcToPlc.ActPos) > GVL_SERVO_ROBOT_CONST.LASER_SERVO_DIFFERENCE_THRESHOLD THEN
		westLaserErrorCount := westLaserErrorCount + 1;
		IF rowIndex < MAX_CSV_ROWS THEN
			database[rowIndex,0] := LREAL_TO_STRING(GVL_Axes.AxisWest.NcToPlc.ActPos);
			database[rowIndex,1] := LREAL_TO_STRING(westLaserDistanceMM);
			database[rowIndex,2] := LREAL_TO_STRING(westLaserDistanceRaw);
			database[rowIndex,3] := LREAL_TO_STRING(GVL_Axes.AxisEast.NcToPlc.ActPos);
			database[rowIndex,4] := LREAL_TO_STRING(eastLaserDistanceMM);
			database[rowIndex,5] := LREAL_TO_STRING(eastLaserDistanceRaw);
			rowIndex := rowIndex + 1;
		END_IF
	
		IF westLaserErrorCount > maxWestLaserErrorCount THEN
			maxWestLaserErrorCount := westLaserErrorCount;
			positionMaxWestLaserErrorCount[0] := westLaserDistanceMM;
			positionMaxWestLaserErrorCount[1] := GVL_Axes.AxisWest.NcToPlc.ActPos;
		END_IF
	ELSE
		westLaserErrorCount := 0;
	END_IF
	
	IF ABS(eastLaserDistanceMM - GVL_Axes.AxisEast.NcToPlc.ActPos) > GVL_SERVO_ROBOT_CONST.LASER_SERVO_DIFFERENCE_THRESHOLD THEN
		eastLaserErrorCount := eastLaserErrorCount + 1;
		IF rowIndex < MAX_CSV_ROWS THEN
			database[rowIndex,0] := LREAL_TO_STRING(GVL_Axes.AxisWest.NcToPlc.ActPos);
			database[rowIndex,1] := LREAL_TO_STRING(westLaserDistanceMM);
			database[rowIndex,2] := LREAL_TO_STRING(westLaserDistanceRaw);
			database[rowIndex,3] := LREAL_TO_STRING(GVL_Axes.AxisEast.NcToPlc.ActPos);
			database[rowIndex,4] := LREAL_TO_STRING(eastLaserDistanceMM);
			database[rowIndex,5] := LREAL_TO_STRING(eastLaserDistanceRaw);
			rowIndex := rowIndex + 1;
		END_IF
		IF eastLaserErrorCount > maxEastLaserErrorCount THEN
			maxEastLaserErrorCount := eastLaserErrorCount;
			positionMaxEastLaserErrorCount[0] := eastLaserDistanceMM;
			positionMaxEastLaserErrorCount[1] := GVL_Axes.AxisEast.NcToPlc.ActPos;
		END_IF
	ELSE
		eastLaserErrorCount := 0;
	END_IF
ELSE
	westLaserErrorCount := 0;
	eastLaserErrorCount := 0;
END_IF

//Logging laser raw values to database, written to csv in CSV_Writer
IF startCount THEN
	IF counterCycles MOD cycleModulus = 0 THEN
		IF rowIndex < MAX_CSV_ROWS THEN
			database[rowIndex,0] := LREAL_TO_STRING(GVL_Axes.AxisWest.NcToPlc.ActPos);
			database[rowIndex,1] := LREAL_TO_STRING(westLaserDistanceMM);
			database[rowIndex,2] := LREAL_TO_STRING(westLaserDistanceRaw);
			database[rowIndex,3] := LREAL_TO_STRING(GVL_Axes.AxisEast.NcToPlc.ActPos);
			database[rowIndex,4] := LREAL_TO_STRING(eastLaserDistanceMM);
			database[rowIndex,5] := LREAL_TO_STRING(eastLaserDistanceRaw);
		END_IF
		rowIndex := rowIndex + 1;
	END_IF
	counterCycles := counterCycles + 1;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Stop_Servos" Id="{7d8e10e5-888f-4c22-837f-e643348693b1}">
      <Declaration><![CDATA[//Stops gantry
METHOD Stop_Servos : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[stopGantry := TRUE;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_GantryHoldDown">
      <LineId Id="189" Count="1" />
      <LineId Id="499" Count="0" />
      <LineId Id="496" Count="0" />
      <LineId Id="487" Count="0" />
      <LineId Id="325" Count="0" />
      <LineId Id="324" Count="0" />
      <LineId Id="266" Count="0" />
      <LineId Id="188" Count="0" />
      <LineId Id="186" Count="0" />
      <LineId Id="197" Count="1" />
      <LineId Id="207" Count="0" />
      <LineId Id="195" Count="0" />
      <LineId Id="208" Count="0" />
    </LineIds>
    <LineIds Name="FB_GantryHoldDown.CSV_Writer">
      <LineId Id="6" Count="99" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_GantryHoldDown.Cylinder_Set_Cutting">
      <LineId Id="12" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="47" Count="1" />
      <LineId Id="33" Count="0" />
      <LineId Id="75" Count="0" />
      <LineId Id="77" Count="3" />
      <LineId Id="76" Count="0" />
      <LineId Id="38" Count="2" />
      <LineId Id="64" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="86" Count="0" />
      <LineId Id="82" Count="3" />
      <LineId Id="81" Count="0" />
      <LineId Id="53" Count="0" />
    </LineIds>
    <LineIds Name="FB_GantryHoldDown.Follow_Robot">
      <LineId Id="98" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="163" Count="3" />
      <LineId Id="135" Count="0" />
      <LineId Id="167" Count="0" />
      <LineId Id="172" Count="0" />
      <LineId Id="169" Count="2" />
      <LineId Id="168" Count="0" />
      <LineId Id="193" Count="0" />
      <LineId Id="192" Count="0" />
      <LineId Id="191" Count="0" />
      <LineId Id="194" Count="0" />
      <LineId Id="196" Count="1" />
      <LineId Id="195" Count="0" />
      <LineId Id="134" Count="0" />
      <LineId Id="80" Count="1" />
      <LineId Id="83" Count="0" />
      <LineId Id="85" Count="0" />
      <LineId Id="82" Count="0" />
      <LineId Id="36" Count="1" />
      <LineId Id="35" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="40" Count="4" />
      <LineId Id="74" Count="1" />
      <LineId Id="73" Count="0" />
      <LineId Id="45" Count="1" />
      <LineId Id="48" Count="4" />
      <LineId Id="70" Count="2" />
      <LineId Id="53" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="FB_GantryHoldDown.Gantry_Follow_Error">
      <LineId Id="10" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="23" Count="1" />
      <LineId Id="22" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="55" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="33" Count="1" />
      <LineId Id="36" Count="2" />
      <LineId Id="30" Count="0" />
      <LineId Id="39" Count="1" />
      <LineId Id="56" Count="0" />
      <LineId Id="59" Count="3" />
      <LineId Id="57" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="16" Count="0" />
    </LineIds>
    <LineIds Name="FB_GantryHoldDown.Home_Servos">
      <LineId Id="169" Count="12" />
      <LineId Id="55" Count="0" />
    </LineIds>
    <LineIds Name="FB_GantryHoldDown.Lower_Raise_Rollers">
      <LineId Id="13" Count="2" />
      <LineId Id="11" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_GantryHoldDown.Manual_Move_Servos">
      <LineId Id="5" Count="0" />
      <LineId Id="15" Count="1" />
      <LineId Id="18" Count="1" />
      <LineId Id="17" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="13" Count="1" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_GantryHoldDown.Pneumatics_Error">
      <LineId Id="21" Count="0" />
      <LineId Id="36" Count="2" />
      <LineId Id="40" Count="1" />
      <LineId Id="39" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="14" Count="1" />
      <LineId Id="20" Count="0" />
      <LineId Id="22" Count="1" />
      <LineId Id="25" Count="1" />
      <LineId Id="24" Count="0" />
      <LineId Id="28" Count="1" />
      <LineId Id="27" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_GantryHoldDown.Reset_Servos">
      <LineId Id="5" Count="1" />
      <LineId Id="8" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="13" Count="2" />
    </LineIds>
    <LineIds Name="FB_GantryHoldDown.Servo_Commands">
      <LineId Id="34" Count="14" />
      <LineId Id="50" Count="4" />
      <LineId Id="49" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="6" Count="5" />
      <LineId Id="137" Count="0" />
      <LineId Id="55" Count="3" />
      <LineId Id="138" Count="0" />
      <LineId Id="133" Count="0" />
      <LineId Id="132" Count="0" />
      <LineId Id="134" Count="0" />
      <LineId Id="136" Count="0" />
      <LineId Id="135" Count="0" />
      <LineId Id="131" Count="0" />
      <LineId Id="128" Count="0" />
      <LineId Id="127" Count="0" />
      <LineId Id="129" Count="1" />
      <LineId Id="120" Count="6" />
      <LineId Id="119" Count="0" />
      <LineId Id="113" Count="0" />
      <LineId Id="112" Count="0" />
      <LineId Id="114" Count="0" />
      <LineId Id="118" Count="0" />
      <LineId Id="115" Count="0" />
      <LineId Id="85" Count="0" />
      <LineId Id="84" Count="0" />
      <LineId Id="91" Count="1" />
      <LineId Id="94" Count="0" />
      <LineId Id="104" Count="0" />
      <LineId Id="100" Count="0" />
      <LineId Id="90" Count="0" />
      <LineId Id="102" Count="1" />
      <LineId Id="101" Count="0" />
      <LineId Id="62" Count="1" />
      <LineId Id="65" Count="1" />
      <LineId Id="64" Count="0" />
      <LineId Id="67" Count="1" />
      <LineId Id="70" Count="1" />
      <LineId Id="69" Count="0" />
      <LineId Id="76" Count="0" />
      <LineId Id="78" Count="1" />
      <LineId Id="77" Count="0" />
      <LineId Id="31" Count="0" />
    </LineIds>
    <LineIds Name="FB_GantryHoldDown.Servo_Feedback_Ok">
      <LineId Id="164" Count="9" />
      <LineId Id="162" Count="1" />
      <LineId Id="134" Count="0" />
      <LineId Id="136" Count="1" />
      <LineId Id="143" Count="18" />
      <LineId Id="142" Count="0" />
      <LineId Id="174" Count="1" />
      <LineId Id="138" Count="0" />
      <LineId Id="74" Count="1" />
      <LineId Id="116" Count="8" />
      <LineId Id="85" Count="0" />
      <LineId Id="73" Count="0" />
      <LineId Id="178" Count="1" />
      <LineId Id="182" Count="18" />
      <LineId Id="177" Count="0" />
      <LineId Id="201" Count="1" />
      <LineId Id="181" Count="0" />
      <LineId Id="176" Count="0" />
      <LineId Id="36" Count="2" />
      <LineId Id="204" Count="0" />
      <LineId Id="21" Count="1" />
      <LineId Id="29" Count="0" />
      <LineId Id="205" Count="0" />
      <LineId Id="240" Count="0" />
      <LineId Id="243" Count="5" />
      <LineId Id="241" Count="1" />
      <LineId Id="232" Count="0" />
      <LineId Id="215" Count="1" />
      <LineId Id="223" Count="1" />
      <LineId Id="217" Count="0" />
      <LineId Id="207" Count="1" />
      <LineId Id="206" Count="0" />
      <LineId Id="209" Count="2" />
      <LineId Id="249" Count="7" />
      <LineId Id="233" Count="0" />
      <LineId Id="219" Count="3" />
      <LineId Id="218" Count="0" />
      <LineId Id="212" Count="1" />
      <LineId Id="34" Count="0" />
      <LineId Id="30" Count="1" />
      <LineId Id="214" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="203" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="52" Count="1" />
      <LineId Id="59" Count="0" />
      <LineId Id="55" Count="0" />
      <LineId Id="46" Count="1" />
      <LineId Id="50" Count="0" />
      <LineId Id="57" Count="0" />
    </LineIds>
    <LineIds Name="FB_GantryHoldDown.Stop_Servos">
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>