<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_GantryHoldDown" Id="{212016f5-1181-4eaa-b089-a8c72c29c00d}" SpecialFunc="None">
    <Declaration><![CDATA[//TODO: set methods to enable all following, pneumatic cylinder activation, error handling

FUNCTION_BLOCK FB_GantryHoldDown
VAR_OUTPUT
END_VAR
VAR
	//MC_functions, called in methods
	fbMC_PowerWest		: MC_Power;
	fbMC_PowerEast		: MC_Power;
	fbMC_HomeWest		: MC_Home;
	fbMC_HomeEast		: MC_Home;
	fbMC_MoveAbsWest1	: MC_MoveAbsolute;
	fbMC_MoveAbsWest2	: MC_MoveAbsolute;
	fbMC_SyncAxes		: MC_GearIn;
	fbReadStatus		: MC_ReadStatus;
	fbMC_Stop			: MC_Stop;
	Aborting			: MC_BufferMode;
	fbMC_Reset			: MC_Reset;
	fbSOEReset			: FB_SoEReset;
	
	//Inputs
	ls1NE AT %I* 		: BOOL;
	ls3NW AT %I* 		: BOOL;
	
	//Pneumatic cylinders
	cylindersNorth 			AT %Q* : BOOL;
	cylindersCentreNorth	AT %Q* : BOOL;
	cylindersCentreSouth	AT %Q* : BOOL;
	cylindersSouth			AT %Q* : BOOL;
	pressureSwitchSpindle	AT %I* : BOOL;
	pressureSwitchHoldDown	AT %I* : BOOL;
	pressureSwitchTableClamps AT %I* : BOOL;
	
	//Pneumatic switches
	
	
	//Variable to be set by program being run
	LEN_WOOD : LREAL := 2133; //mm, length of wood being clamped
	
	rollersReady		: BOOL;
	
	// Enable bools
	executeEnable		: BOOL := FALSE;
	executeHome 		: BOOL := FALSE;
	executeCouple 		: BOOL := FALSE;
	executeCylinders	: BOOL := FALSE;
	followVariable		: BOOL:= TRUE; //Set for following robot
	stopGantry			: BOOL := FALSE;
	resetExec			: BOOL := FALSE;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[GVL_Axes.AxisWest.ReadStatus();
GVL_Axes.AxisEast.ReadStatus();
	
// Movement functions
Servo_Commands();

// Enable and couple axes
executeEnable := TRUE;
IF GVL_Axes.AxisEast.NcToPlc.CoupleState <> 3 THEN
	executeCouple := NOT executeCouple;
END_IF]]></ST>
    </Implementation>
    <Method Name="Cylinder_Set_Cutting" Id="{80c33305-3d27-491c-90ce-c1e0d842bbab}">
      <Declaration><![CDATA[METHOD Cylinder_Set_Cutting
VAR_INPUT
END_VAR
VAR
	POS_CYLINDER_NORTH : LREAL := 76.5; //mm, position of north pneum cylinder relative to gantry plate
	POS_CYLINDER_NORTHCENTRE : LREAL := 229.62; //mm, position of centre north pneum cylinder relative to gantry plate
	POS_CYLINDER_SOUTHCENTRE : LREAL := 712.212; //mm, position of centre south pneum cylinder relative to gantry plate
	POS_CYLINDER_SOUTH : LREAL := 867.832; //mm, position of south pneum cylinder relative to gantry plate
	POS_TABLE_NORTH : LREAL := 474.14; //mm, position of table start WRT Zero
	FACTOR_OF_SAFETY : LREAL := 100; //mm, distance from edge of table cylinders will rise
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF executeCylinders THEN
	IF GVL_Axes.AxisWest.NcToPlc.ActPos < POS_TABLE_NORTH + FACTOR_OF_SAFETY - POS_CYLINDER_NORTH THEN
		cylindersNorth := 1;
	ELSE
		cylindersNorth := 0;
	END_IF
	
	IF GVL_Axes.AxisWest.NcToPlc.ActPos < POS_TABLE_NORTH + FACTOR_OF_SAFETY - POS_CYLINDER_NORTHCENTRE THEN
		cylindersCentreNorth := 1;
	ELSE
		cylindersCentreNorth := 0;
	END_IF
	
	IF GVL_Axes.AxisWest.NcToPlc.ActPos > POS_TABLE_NORTH + LEN_WOOD - FACTOR_OF_SAFETY - POS_CYLINDER_SOUTH THEN
		cylindersSouth := 1;
	ELSE
		cylindersSouth := 0;
	END_IF
	
	IF GVL_Axes.AxisWest.NcToPlc.ActPos > POS_TABLE_NORTH + LEN_WOOD - FACTOR_OF_SAFETY - POS_CYLINDER_SOUTHCENTRE THEN
			cylindersCentreSouth := 1;
	ELSE 
			cylindersCentreSouth := 0;
	END_IF
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Follow_Robot" Id="{56fb3307-d26a-436e-8a13-67eb97620809}">
      <Declaration><![CDATA[METHOD Follow_Robot : BOOL //returns false if robot too far away (1"), true if it is
VAR_INPUT
	robotPoseGantry : Structure_RobotPose;
END_VAR

VAR
	targetPosition: LREAL;
	accel: LREAL:=600;
	decel: LREAL:=600;
	jer:   LREAL:=1200;
	vel: LREAL:= 170;
	
	dustBootBottom : INT := 20;
	dustBootLeft : INT := 20;
	dustBootRight : INT := 20;
	dustBootTop : INT := 20;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Set target position to middle of robot tool
targetPosition := (robotPoseGantry.yPose - GVL_SERVO_ROBOT_CONST.MIN_POS_ROBOT) * GVL_SERVO_ROBOT_CONST.DIFFERENCE_SERVOWEST/GVL_SERVO_ROBOT_CONST.DIFFERENCE_ROBOT;
IF targetPosition < GVL_SERVO_ROBOT_CONST.MIN_POS_SERVOWEST THEN
	targetPosition := GVL_SERVO_ROBOT_CONST.MIN_POS_SERVOWEST;
ELSIF targetPosition > GVL_SERVO_ROBOT_CONST.MAX_POS_SERVOWEST THEN
	targetPosition := GVL_SERVO_ROBOT_CONST.MAX_POS_SERVOWEST;
END_IF

followVariable := NOT followVariable;

IF GVL_Axes.AxisWest.Status.Homed THEN
	fbMC_MoveAbsWest1(
		Axis:= GVL_Axes.AxisWest, 
		Execute:= followVariable, 
		Position:= targetPosition, 
		Velocity:= vel,
		Acceleration:= accel, 
		Deceleration:= decel,
		Jerk:= jer, 
		BufferMode:= Aborting);
	
	fbMC_MoveAbsWest2(
		Axis:= GVL_Axes.AxisWest, 
		Execute:= NOT followVariable, 
		Position:= targetPosition, 
		Velocity:= vel,
		Acceleration:= accel, 
		Deceleration:= decel,
		Jerk:= jer, 
		BufferMode:= Aborting);
END_IF

//If target position - current position > threshold, hold robot
IF ABS(targetPosition - GVL_Axes.AxisWest.NcToPlc.ActPos) > GVL_SERVO_ROBOT_CONST.FOLLOW_THRESHOLD AND robotPoseGantry.zPose < GVL_SERVO_ROBOT_CONST.ROLLERS_Z_HEIGHT THEN
	Follow_Robot := FALSE; //Gantry isn't following, hold robot
ELSE 
	Follow_Robot := TRUE; //Gantry is following properly, keep robot on run
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Home_Servos" Id="{40c1f2ee-aae6-427c-ae6f-0159b8da9b8e}">
      <Declaration><![CDATA[//Enables, couples and homes hold down gantry
//TODO: check if robot is above rollers before homing
//Returns True if can sucessfully home, false if robot too low
METHOD Home_Servos : Structure_Error
VAR_INPUT
	robotPose	: Structure_RobotPose;
END_VAR

VAR

END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF robotPose.zPose > GVL_SERVO_ROBOT_CONST.ROLLERS_Z_HEIGHT THEN
	//Home Axes
	IF GVL_Axes.AxisEast.NcToPlc.CoupleState = 3 THEN
		executeHome := TRUE;
		Home_Servos.isError := FALSE;
		Home_Servos.errorMessage := 'No Error';
	ELSE
		Home_Servos.isError := TRUE;
		Home_Servos.errorMessage := 'Axis not coupled properly';
	END_IF
ELSE
	Home_Servos.isError := TRUE;
	Home_Servos.errorMessage := 'Robot too low to home';
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Lower_Raise_Rollers" Id="{be41d060-f784-4b54-8d63-d2871638718b}">
      <Declaration><![CDATA[METHOD Lower_Raise_Rollers
VAR_INPUT
	raiseRollers	: BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[cylindersNorth 			:= raiseRollers;
cylindersCentreNorth	:= raiseRollers;
cylindersCentreSouth 	:= raiseRollers;
cylindersSouth 			:= raiseRollers;

]]></ST>
      </Implementation>
    </Method>
    <Method Name="Pneumatics_Error" Id="{53ecf6cd-303e-4078-9884-7bcc9af1828f}">
      <Declaration><![CDATA[//TODO: Write
METHOD Pneumatics_Error : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Pneumatics_Error := FALSE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Reset_Servos" Id="{a5d370ca-8c90-416a-969e-b60ae3e560f6}">
      <Declaration><![CDATA[//Resets servo errors
METHOD Reset_Servos : BOOL // Returns true if errors reset successfully
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[stopGantry := FALSE;
resetExec := TRUE;

Reset_Servos := NOT GVL_Axes.AxisWest.Status.Error;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Servo_Commands" Id="{e822ca69-a3df-402b-82d4-4917018968fd}">
      <Declaration><![CDATA[//All the servo motions. Triggered in separate methods by their execute flags
METHOD Servo_Commands
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Enable Axes
fbMC_PowerWest(
	Axis:= GVL_Axes.AxisWest, 
	Enable:= executeEnable, 
	Enable_Positive:= executeEnable, 
	Enable_Negative:= executeEnable, 
	Override:= 100.0);
		
fbMC_PowerEast(
	Axis:= GVL_Axes.AxisEast, 
	Enable:= executeEnable, 
	Enable_Positive:= executeEnable, 
	Enable_Negative:= executeEnable, 
	Override:= 100.0);
	
//Couple Axes
fbMC_SyncAxes(
	Master:= GVL_Axes.AxisWest, 
	Slave:= GVL_Axes.AxisEast, 
	Execute:= executeCouple, 
	RatioNumerator:= 1);

//Home
fbMC_HomeWest(
	Axis:= GVL_Axes.AxisWest, 
	Execute:= executeHome, 
	Position:= GVL_SERVO_ROBOT_CONST.POSITION_LIMIT_SWITCH, 
	HomingMode:= MC_DefaultHoming, 
	bCalibrationCam:= NOT ls3NW);
	
IF fbMC_HomeWest.Done THEN
	executeHome := FALSE;
END_IF
	
//Stop
fbMC_Stop(
	Axis:= GVL_Axes.AxisWest, 
	Execute:= stopGantry, 
	);
	
//Reset
fbMC_Reset(
	Axis := GVL_Axes.AxisWest,
	Execute := ResetExec);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Stop_Servos" Id="{7d8e10e5-888f-4c22-837f-e643348693b1}">
      <Declaration><![CDATA[//Stops gantry
METHOD Stop_Servos : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[stopGantry := TRUE;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_GantryHoldDown">
      <LineId Id="189" Count="1" />
      <LineId Id="266" Count="0" />
      <LineId Id="188" Count="0" />
      <LineId Id="186" Count="0" />
      <LineId Id="199" Count="0" />
      <LineId Id="197" Count="1" />
      <LineId Id="207" Count="0" />
      <LineId Id="195" Count="0" />
      <LineId Id="208" Count="0" />
    </LineIds>
    <LineIds Name="FB_GantryHoldDown.Cylinder_Set_Cutting">
      <LineId Id="52" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="47" Count="1" />
      <LineId Id="33" Count="0" />
      <LineId Id="75" Count="0" />
      <LineId Id="77" Count="3" />
      <LineId Id="76" Count="0" />
      <LineId Id="38" Count="2" />
      <LineId Id="64" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="86" Count="0" />
      <LineId Id="82" Count="3" />
      <LineId Id="81" Count="0" />
      <LineId Id="53" Count="0" />
    </LineIds>
    <LineIds Name="FB_GantryHoldDown.Follow_Robot">
      <LineId Id="98" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="80" Count="1" />
      <LineId Id="83" Count="0" />
      <LineId Id="85" Count="0" />
      <LineId Id="82" Count="0" />
      <LineId Id="36" Count="1" />
      <LineId Id="35" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="40" Count="4" />
      <LineId Id="74" Count="1" />
      <LineId Id="73" Count="0" />
      <LineId Id="45" Count="1" />
      <LineId Id="48" Count="4" />
      <LineId Id="70" Count="2" />
      <LineId Id="53" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="109" Count="1" />
      <LineId Id="112" Count="0" />
      <LineId Id="114" Count="0" />
      <LineId Id="111" Count="0" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="FB_GantryHoldDown.Home_Servos">
      <LineId Id="169" Count="12" />
      <LineId Id="55" Count="0" />
    </LineIds>
    <LineIds Name="FB_GantryHoldDown.Lower_Raise_Rollers">
      <LineId Id="13" Count="2" />
      <LineId Id="11" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_GantryHoldDown.Pneumatics_Error">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_GantryHoldDown.Reset_Servos">
      <LineId Id="5" Count="1" />
      <LineId Id="8" Count="0" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="FB_GantryHoldDown.Servo_Commands">
      <LineId Id="34" Count="14" />
      <LineId Id="50" Count="4" />
      <LineId Id="49" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="6" Count="5" />
      <LineId Id="55" Count="3" />
      <LineId Id="30" Count="0" />
      <LineId Id="62" Count="1" />
      <LineId Id="65" Count="1" />
      <LineId Id="64" Count="0" />
      <LineId Id="67" Count="1" />
      <LineId Id="70" Count="1" />
      <LineId Id="69" Count="0" />
      <LineId Id="31" Count="0" />
    </LineIds>
    <LineIds Name="FB_GantryHoldDown.Stop_Servos">
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>