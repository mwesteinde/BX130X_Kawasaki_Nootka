<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_Spindle" Id="{3dc147eb-3dde-4052-8db8-ee0200a73c1f}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Spindle
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	// ================= Tool Changing ====================================
	pbToolChange AT %I*: BOOL;
	spindleToolLocked AT %I* : BOOL;
	spindleToolOpen AT %I* : BOOL;
	cylinderToolRelease1 AT %Q* : BOOL;
	cylinderToolRelease2 AT %Q* : BOOL;
	spindleClean AT %Q* : BOOL;
	toolChangeTimer : TON;
	tool0 AT %I* : BOOL;
	tool1 AT %I* : BOOL;
	tool2 AT %I* : BOOL;
	tool3 AT %I* : BOOL;
	tool4 AT %I* : BOOL;
	tool5 AT %I* : BOOL;
	tool6 AT %I* : BOOL;
	tool7 AT %I* : BOOL;
	tool8 AT %I* : BOOL;
	toolLimitSwitchArray : ARRAY[0..8] OF BOOL := [tool0, tool1, tool2, tool3, tool4, tool5, tool6, tool7];
	//Dust Hood
	dustHoodCylinder AT %Q*		: BOOL;
	
	currentTool : Tool_Type := GVL_Programs.noTool;
	toolSelectedAtInitialization : BOOL := FALSE;
	
	//--------------------Spindle TCP communication --------
	fbWriteRegs : FB_MBWriteRegs; //Function call
	fbWriteRegs2 : FB_MBWriteRegs; //Error reset
	fbReadReg	: FB_MBReadRegs; //Drive run/stop
	fbReadReg2	: FB_MBReadRegs; //Error
	ipAddr      : STRING(15) := '192.168.1.5'; //IPADDRESS
	eWriteState	: (WAIT, START, STOP, WRITE); //state machine
	spindleRunStatus : WORD;
	spindleErrorStatus	: WORD;
	spindleIsStopped	: BOOL;
	spindleError		: BOOL;
	
	//--------------------Warmup params-----------
	spindleIsWarm 	: BOOL;
	warmupSpeed1 	: INT := 12000;
	warmupTime1 	: TIME := T#240S;
	warmupSpeed2 	: INT := 18000;
	warmupTime2 	: TIME := T#240S;
	warmupSpeed3 	: INT := 24000;
	warmupTime3 	: TIME := T#240S;
	startTime		: TIME;
	elapsedWarmupTime : TIME;
	spindleWarmupOn	: BOOL;
	triggerWarmup	: R_TRIG;
	
	warmUp3: BOOL;
	warmUp2: BOOL;
	warmUp1: BOOL;
	triggerWarm1: R_TRIG;
	triggerWarm2: R_TRIG;
	triggerWarm3: R_TRIG;
	requestedTool: Tool_Type;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[VFD_Status();
//Spindle warmup routine, trigerred from Start_Spindle and stopped with Stop_Spindle
	triggerWarmup(CLK:=spindleWarmupOn);
	triggerWarm1(CLK:=warmUp1);
	triggerWarm2(CLK:=warmUp2);
	triggerWarm3(CLK:=warmUp3);
	
IF spindleWarmupOn THEN
	IF triggerWarmup.Q THEN
		startTime := TIME(); 
	END_IF
		
	elapsedWarmupTime := TIME() - startTime;
	
	IF elapsedWarmupTime > warmUpTime1 + warmupTime2 + warmupTime3 THEN
		warmUp1 := FALSE;
		warmUp2 := FALSE;
		warmUp3 := FALSE;
		Stop_Spindle();
		spindleWarmupOn := FALSE;
		spindleIsWarm := TRUE;
	ELSIF elapsedWarmupTime > warmUpTime1 + warmupTime2 THEN
		warmUp1 := FALSE;
		warmUp2 := FALSE;
		warmUp3 := TRUE;
	ELSIF elapsedWarmupTime > warmUpTime1 THEN
		warmUp1 := FALSE;
		warmUp2 := TRUE;
		warmUp3 := FALSE;
	ELSIF elapsedWarmupTime > T#0S THEN
		warmUp1 := TRUE;
		warmUp2 := FALSE;
		warmUp3 := FALSE;
	END_IF
	
	IF triggerWarm1.Q THEN
		Start_Spindle(spindleSpeed := warmupSpeed1);
	ELSIF triggerWarm2.Q THEN
		Start_Spindle(spindleSpeed := warmupSpeed2);
	ELSIF triggerWarm3.Q THEN
		Start_Spindle(spindleSpeed := warmupSpeed3);
	END_IF

END_IF]]></ST>
    </Implementation>
    <Method Name="Dust_Hood" Id="{75eb1e7d-7e88-4ff3-acdf-1fc2cf420d06}">
      <Declaration><![CDATA[METHOD Dust_Hood : BOOL
VAR_INPUT
	x_pose : LREAL;
	enable : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF enable THEN
	IF x_pose < -1060 THEN
		dustHoodCylinder := FALSE;
	ELSE
		dustHoodCylinder := TRUE;
	END_IF
ELSE
	dustHoodCylinder := FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Grab_Tool" Id="{b157a71e-63d7-43c6-8cda-129fe8943333}">
      <Declaration><![CDATA[//Sets tool change cylinders to closed, returns true if tool locked
METHOD Grab_Tool : BOOL 
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[cylinderToolRelease1 := FALSE;
cylinderToolRelease2 := FALSE;
Grab_Tool := spindleToolLocked;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Manual_Tool_Change" Id="{caf02692-220f-45ea-9a62-11b6af7ca524}">
      <Declaration><![CDATA[METHOD Manual_Tool_Change
VAR_INPUT
	changeToolEnable : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF changeToolEnable THEN
	toolChangeTimer(IN:= pbToolChange, PT:=T#2S);
	
	IF pbToolChange THEN
		IF toolChangeTimer.Q AND spindleIsStopped THEN
			cylinderToolRelease1 := TRUE;
			cylinderToolRelease2 := TRUE;
		END_IF
	ELSE
		cylinderToolRelease1 := FALSE;
		cylinderToolRelease2 := FALSE;
	END_IF
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Release_Tool" Id="{44458576-a982-4dd8-917f-a23f3b30cecf}">
      <Declaration><![CDATA[METHOD Release_Tool : BOOL; //Sets tool change cylinders to open, returns true if tool released
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF spindleIsStopped THEN
	cylinderToolRelease1 := TRUE;
	cylinderToolRelease2 := TRUE;
	Release_Tool := spindleToolOpen;
ELSE
	cylinderToolRelease1 := FALSE;
	cylinderToolRelease2 := FALSE;
	Release_Tool := FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Reset_Drive" Id="{9a8ab2d1-8aed-4c9c-967c-6e187f19fbf4}">
      <Declaration><![CDATA[//Resets drive, returns true if no drive error
METHOD Reset_Drive : BOOL
VAR_INPUT
END_VAR
VAR
	errorReset : WORD := INT_TO_WORD(2);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbWriteRegs2(
			sIPAddr:= ipAddr, 
			nTCPPort:= 502, 
			nUnitID:= 16#FF, 
			nQuantity:= 1, 
			nMBAddr:= 16#2002, 
			cbLength:= SIZEOF(errorReset), 
			pSrcAddr:= ADR(errorReset), 
			bExecute:= FALSE, 
			tTimeout:= , 
			bBusy=> , 
			bError=> , 
			nErrId=> );
			
fbWriteRegs2(
			sIPAddr:= ipAddr, 
			nTCPPort:= 502, 
			nUnitID:= 16#FF, 
			nQuantity:= 1, 
			nMBAddr:= 16#2002, 
			cbLength:= SIZEOF(errorReset), 
			pSrcAddr:= ADR(errorReset), 
			bExecute:= TRUE, 
			tTimeout:= , 
			bBusy=> , 
			bError=> , 
			nErrId=> );
			
IF NOT spindleError THEN
	Reset_Drive := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Spindle_Warmup" Id="{6626f887-e6c9-4081-bd79-0ba0a3b91bcb}">
      <Declaration><![CDATA[//Starts spindle warmup, called in fbSpindle
METHOD Spindle_Warmup
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[spindleWarmupOn := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Start_Spindle" Id="{702c570c-7182-409d-ac49-a3e78d7a4915}">
      <Declaration><![CDATA[//Description:
//This method is responsible for starting the spindle motor based on the input speed provided in revolutions per minute (RPM). It converts the spindle speed into frequency and initiates the spindle motor accordingly.

//Parameters:
//- spindleSpeed: INT - The desired spindle speed in RPM.

//Returns:
//This method does not return any value.
METHOD Start_Spindle
VAR_INPUT
	spindleSpeed : INT; //Spindle speed RPM
	
END_VAR

VAR
	spindleFrequency : INT := (spindleSpeed - 12000) / 30 + 400; //Speed conversion to frequency
	startValue  : ARRAY [0..1] OF WORD := [INT_TO_WORD(18), INT_TO_WORD(SpindleFrequency*10)];
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbWriteRegs(
			sIPAddr:= ipAddr, 
			nTCPPort:= 502, 
			nUnitID:= 16#FF, 
			nQuantity:= 2, 
			nMBAddr:= 16#2000, 
			cbLength:= SIZEOF(startValue), 
			pSrcAddr:= ADR(startValue), 
			bExecute:= FALSE, 
			tTimeout:= , 
			bBusy=> , 
			bError=> , 
			nErrId=> );
			
fbWriteRegs(
			sIPAddr:= ipAddr, 
			nTCPPort:= 502, 
			nUnitID:= 16#FF, 
			nQuantity:= 2, 
			nMBAddr:= 16#2000, 
			cbLength:= SIZEOF(startValue), 
			pSrcAddr:= ADR(startValue), 
			bExecute:= TRUE, 
			tTimeout:= , 
			bBusy=> , 
			bError=> , 
			nErrId=> );
			
spindleClean := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Stop_Spindle" Id="{ef644fdc-e119-4b63-a532-fadf07840f86}">
      <Declaration><![CDATA[//Stops spindle
METHOD Stop_Spindle
VAR_INPUT
END_VAR

VAR
	stopValue: ARRAY [0..1] OF WORD := [INT_TO_WORD(1), INT_TO_WORD(0)];
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbWriteRegs(
			sIPAddr:= ipAddr, 
			nTCPPort:= 502, 
			nUnitID:= 16#FF, 
			nQuantity:= 2, 
			nMBAddr:= 16#2000, 
			cbLength:= SIZEOF(stopValue), 
			pSrcAddr:= ADR(stopValue), 
			bExecute:= FALSE, 
			tTimeout:= , 
			bBusy=> , 
			bError=> , 
			nErrId=> );

fbWriteRegs(
			sIPAddr:= ipAddr, 
			nTCPPort:= 502, 
			nUnitID:= 16#FF, 
			nQuantity:= 2, 
			nMBAddr:= 16#2000, 
			cbLength:= SIZEOF(stopValue), 
			pSrcAddr:= ADR(stopValue), 
			bExecute:= TRUE, 
			tTimeout:= , 
			bBusy=> , 
			bError=> , 
			nErrId=> );
			
spindleWarmupOn := FALSE;
warmup1 := FALSE;
warmup2 := FALSE;
warmup3 := FALSE;
spindleClean := FALSE;

]]></ST>
      </Implementation>
    </Method>
    <Method Name="Update_Current_Tool" Id="{d316eb47-28e5-4b11-bbfd-0a31ae49903c}">
      <Declaration><![CDATA[//Updates the current tool based on an integer
METHOD Update_Current_Tool : BOOL
VAR_INPUT
	toolNumber : INT;
END_VAR
VAR
	updatedTool : Tool_Type;
	success : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE toolNumber OF
		0:
			updatedTool := GVL_Programs.sawblade;
		6:
			updatedTool := GVL_Programs.halfInchBall;
		2:
			updatedTool := GVL_Programs.quarterInchUpcut;
		5:
			updatedTool := GVL_Programs.dovetail;
		4:
			updatedTool := GVL_Programs.halfInchUpcut;
		8:
			updatedTool := GVL_Programs.noTool;
			
		ELSE
			success := FALSE;
	END_CASE
		
currentTool := updatedTool;
	
// Successfully updated the current tool
IF NOT success THEN
	Update_Current_Tool := FALSE;
ELSE
	Update_Current_Tool := TRUE;
	toolSelectedAtInitialization := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Update_Requested_Tool" Id="{85d5d331-1534-446d-a912-cbacd40c27a7}">
      <Declaration><![CDATA[METHOD Update_Requested_Tool : BOOL
VAR_INPUT
	toolNumber : INT;
END_VAR
VAR
	updatedTool : Tool_Type;
	success : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE toolNumber OF
		0:
			updatedTool := GVL_Programs.sawblade;
		6:
			updatedTool := GVL_Programs.halfInchBall;
		2:
			updatedTool := GVL_Programs.quarterInchUpcut;
		5:
			updatedTool := GVL_Programs.dovetail;
		4:
			updatedTool := GVL_Programs.halfInchUpcut;
		8:
			updatedTool := GVL_Programs.noTool;
			
		ELSE
			success := FALSE;
	END_CASE
		
requestedTool := updatedTool;
	
// Successfully updated the current tool
IF NOT success THEN
	Update_Requested_Tool := FALSE;
ELSE
	Update_Requested_Tool := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Verify_Tool_Change_Request" Id="{93de9ffd-c991-4212-b109-f473dd00ac57}">
      <Declaration><![CDATA[METHOD Verify_Tool_Change_Request : BOOL
VAR_INPUT
	toolToDrop : UINT;
	toolToPickup : UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//NC contacts. Detect if current tool holder is empty and requested tool holder is full. If no tool is selected, checks if spindle is empty
IF ((toolLimitSwitchArray[toolToDrop]) AND (NOT toolLimitSwitchArray[toolToPickup] OR toolToPickup = 8) AND (toolToDrop <> 8 OR spindleToolOpen)) THEN 
	Verify_Tool_Change_Request := TRUE;
ELSE
	Verify_Tool_Change_Request := FALSE;
END_IF
Verify_Tool_Change_Request := TRUE; //TODO: remove once wired!!]]></ST>
      </Implementation>
    </Method>
    <Method Name="VFD_Status" Id="{3c5755fa-2782-4792-9f43-a3613d83a04f}">
      <Declaration><![CDATA[//Updates the status of the VFD: whether it's stopped and whether it is in error state
METHOD VFD_Status : BOOL //returns true if drive has no error
VAR_INPUT
END_VAR
VAR
	runStatus : USINT;
	errorStatus : USINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbReadReg(
			sIPAddr:= ipAddr, 
			nTCPPort:= 502, 
			nUnitID:= 16#FF, 
			nQuantity:= 1, 
			nMBAddr:= 16#2101, 
			cbLength:= SIZEOF(spindleRunStatus), 
			pDestAddr := ADR(spindleRunStatus), 
			bExecute:= FALSE, 
			tTimeout:= , 
			bBusy=> , 
			bError=> , 
			nErrId=> );
			
fbReadReg(
			sIPAddr:= ipAddr, 
			nTCPPort:= 502, 
			nUnitID:= 16#FF, 
			nQuantity:= 1, 
			nMBAddr:= 16#2101, 
			cbLength:= SIZEOF(spindleRunStatus), 
			pDestAddr := ADR(spindleRunStatus), 
			bExecute:= TRUE, 
			tTimeout:= , 
			bBusy=> , 
			bError=> , 
			nErrId=> );
			
fbReadReg2(
			sIPAddr:= ipAddr, 
			nTCPPort:= 502, 
			nUnitID:= 16#FF, 
			nQuantity:= 1, 
			nMBAddr:= 16#2226, 
			cbLength:= SIZEOF(spindleErrorStatus), 
			pDestAddr := ADR(spindleErrorStatus), 
			bExecute:= FALSE, 
			tTimeout:= , 
			bBusy=> , 
			bError=> , 
			nErrId=> );

fbReadReg2(
			sIPAddr:= ipAddr, 
			nTCPPort:= 502, 
			nUnitID:= 16#FF, 
			nQuantity:= 1, 
			nMBAddr:= 16#2226, 
			cbLength:= SIZEOF(spindleErrorStatus), 
			pDestAddr := ADR(spindleErrorStatus), 
			bExecute:= TRUE, 
			tTimeout:= , 
			bBusy=> , 
			bError=> , 
			nErrId=> );
			
runStatus := WORD_TO_USINT(spindleRunStatus);
IF runStatus.0 = 0 AND runStatus.1 = 0 THEN
	spindleIsStopped := TRUE;
ELSE 
	spindleIsStopped := FALSE;
END_IF

errorStatus := WORD_TO_USINT(spindleErrorStatus);
IF errorStatus.3 = 1 AND errorStatus.2 = 0 THEN
	spindleError := TRUE;
ELSE 
	spindleError := FALSE;
END_IF

VFD_Status := NOT spindleError;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_Spindle">
      <LineId Id="311" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="158" Count="0" />
      <LineId Id="167" Count="0" />
      <LineId Id="170" Count="1" />
      <LineId Id="159" Count="0" />
      <LineId Id="76" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="84" Count="0" />
      <LineId Id="154" Count="0" />
      <LineId Id="143" Count="0" />
      <LineId Id="109" Count="0" />
      <LineId Id="140" Count="0" />
      <LineId Id="144" Count="0" />
      <LineId Id="182" Count="1" />
      <LineId Id="181" Count="0" />
      <LineId Id="146" Count="1" />
      <LineId Id="155" Count="0" />
      <LineId Id="148" Count="0" />
      <LineId Id="178" Count="1" />
      <LineId Id="161" Count="0" />
      <LineId Id="150" Count="0" />
      <LineId Id="176" Count="1" />
      <LineId Id="163" Count="0" />
      <LineId Id="152" Count="0" />
      <LineId Id="165" Count="0" />
      <LineId Id="174" Count="1" />
      <LineId Id="145" Count="0" />
      <LineId Id="184" Count="2" />
      <LineId Id="188" Count="3" />
      <LineId Id="187" Count="0" />
      <LineId Id="141" Count="0" />
      <LineId Id="77" Count="0" />
    </LineIds>
    <LineIds Name="FB_Spindle.Dust_Hood">
      <LineId Id="13" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="10" Count="1" />
      <LineId Id="8" Count="1" />
      <LineId Id="14" Count="1" />
    </LineIds>
    <LineIds Name="FB_Spindle.Grab_Tool">
      <LineId Id="12" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="13" Count="0" />
    </LineIds>
    <LineIds Name="FB_Spindle.Manual_Tool_Change">
      <LineId Id="11" Count="1" />
      <LineId Id="8" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="34" Count="2" />
      <LineId Id="30" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Spindle.Release_Tool">
      <LineId Id="9" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="18" Count="1" />
      <LineId Id="13" Count="1" />
    </LineIds>
    <LineIds Name="FB_Spindle.Reset_Drive">
      <LineId Id="6" Count="25" />
      <LineId Id="5" Count="0" />
      <LineId Id="42" Count="3" />
    </LineIds>
    <LineIds Name="FB_Spindle.Spindle_Warmup">
      <LineId Id="24" Count="0" />
    </LineIds>
    <LineIds Name="FB_Spindle.Start_Spindle">
      <LineId Id="42" Count="11" />
      <LineId Id="41" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="19" Count="11" />
      <LineId Id="16" Count="0" />
      <LineId Id="73" Count="1" />
    </LineIds>
    <LineIds Name="FB_Spindle.Stop_Spindle">
      <LineId Id="28" Count="11" />
      <LineId Id="26" Count="1" />
      <LineId Id="6" Count="11" />
      <LineId Id="5" Count="0" />
      <LineId Id="40" Count="2" />
      <LineId Id="44" Count="1" />
      <LineId Id="53" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="25" Count="0" />
    </LineIds>
    <LineIds Name="FB_Spindle.Update_Current_Tool">
      <LineId Id="7" Count="10" />
      <LineId Id="53" Count="1" />
      <LineId Id="44" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="25" Count="2" />
      <LineId Id="29" Count="1" />
      <LineId Id="33" Count="1" />
      <LineId Id="63" Count="0" />
      <LineId Id="31" Count="0" />
    </LineIds>
    <LineIds Name="FB_Spindle.Update_Requested_Tool">
      <LineId Id="6" Count="14" />
      <LineId Id="22" Count="9" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Spindle.Verify_Tool_Change_Request">
      <LineId Id="14" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="10" Count="1" />
      <LineId Id="9" Count="0" />
      <LineId Id="12" Count="0" />
    </LineIds>
    <LineIds Name="FB_Spindle.VFD_Status">
      <LineId Id="109" Count="69" />
      <LineId Id="100" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>