<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_Machine" Id="{3f2b54bd-7836-4066-a761-fd73c9f3b9ef}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Machine //Control program
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	robotPose 		: Structure_RobotPose;
	// =============== Machine Modules ================================================
	fbRobot					: FB_Robot;					// Robot object
	fbSpindle				: FB_Spindle;				// Spindle Object. Includes spindle speed, tool changing control
	fbGantry				: FB_GantryHoldDown;		// Gantry hold down object. Includes servo control, pneumatic clamping control, robot following
	fbEnclosure				: FB_Enclosure;				// Enclosure control. Includes table clamping, dust collection monitoring, door control
	fbTorqueSensor			:FB_TorqueSensor;
	fbOperatingCounter		: FB_OperatingCounter;
	
// =============== Safety ================================================
	SafetyPLCRun AT %Q* : BOOL := TRUE; //Ouput to safety PLC to run. If FALSE, safetyPLC turns off and EStop occurs
	safetyPLCEStopBlockRun AT %I* : BOOL; //Status of safety PLC Estop block. If FALSE, Estop block not running
	ErrorAcknowledge AT %Q* : BOOL; // If SafetyPLC goes into error, this needs to turn on to be able to reset
	errorReset AT %Q* : BOOL; // Resets E stops. Must be triggered to enable eStop output
	safetyPLCEStopOut AT %I* : BOOL; //Status of Estop output
	//Safety PLC Errors. If any true, Safety PLC not running properly. Most likely all the devices aren't communicating
	safetyPLCError AT %I* : BOOL; 
	safetyPLCComErr AT %I* : BOOL;
	safetyPLCFBErr AT %I* : BOOL;
	safetyPLCOtherErr AT %I* : BOOL;					
	
	// =============== State machine ================================================
	eSystemState			: E_MachineState := E_MachineState.INITIALIZATION;  // Current state 
	sHMIeSystemStateString	: STRING := TO_STRING(eSystemState); //String of current state, displayed on HMI
	eRequestedState			: E_MachineState := E_MachineState.INITIALIZATION;
	resetSuccessful			: BOOL; //Must be true to reenter initilization
	timerReset				: TON; //tIMER TO SEE HOW LONG OPERATING RESET HAS BEEN ON FOR
	startTimerReset: BOOL;
	fbgetSlaveState 		: FB_EcGetSlaveState;
	fbSetSlaveState : FB_EcSetSlaveState;
	executeGetSlaveState : BOOL;
	executeSetSlaveState : BOOL;
	timerRun				: TON; //Timer for how long Run has been on
	startTimerRun			: BOOL;
	timerProgramIsSelected	: TON;
	
	// =============== HMI buttons and states ========================================
	//Universal buttons
	bHMIReset				: BOOL;	// Button to reset program
	rTrigResetErrors		: R_TRIG; //Trigger linked to bHMIReset
	sHMIErrorDisplay		: STRING(300);
	fTrigInProgramRunning 		: F_TRIG; //Trigger for when robot finishes program
	rTrigInRobotToolUpdated		: R_TRIG; //Trigger for when robot updates tool number

	// initialize.content buttons
	bHMIHomeRobot			: BOOL; 
	rTrigHomeRobot			: R_TRIG; 
	bHMIHomeMotors			: BOOL; 
	rTrigHomeMotors			: R_TRIG; 
	bHMIOpenCloseDoor		: BOOL; 
	rTrigOpenCloseDoor		: R_TRIG; 
	fTrigOpenCloseDoor		: F_TRIG; 
	bHMILockTables			: BOOL; 
	rTrigLockTables			: R_TRIG; 
	fTrigUnlockTables		: F_TRIG; 
	bHMILowerRaiseRollers	: BOOL; 
	rTrigRaiseRollers		: R_TRIG; 
	fTrigLowerRollers		: F_TRIG; 
	bHMIWarmupSpindle		: BOOL; 
	rTrigWarmupSpindle		: R_TRIG; //
	fTrigStopSpindle		: F_TRIG; //
	bHMIChangeTool			: BOOL;
	rTrigChangeTool			: R_TRIG;
	fTrigStopChangeTool		: F_TRIG;
	rTrigGoToCleanupRobot: R_TRIG;
	bHMIGoToCleanupPosition : BOOL;
	bHMIEnableInitialization: BOOL;
	
	// initialize.content indicators
	sHMICurrentTool			: INT := 8;
	sHMIRequestedTool		: INT := 8;
	sHMIDoorStatus			: STRING(80);
	
	// Settings.content buttons
	bHMIMoveServosNorth : BOOL;
	fTrigMoveServosNorth : F_TRIG;
	bHMIMoveServosSouth : BOOL;
	fTrigMoveServosSouth : F_TRIG;
	bHMIMoveRobotXneg : BOOL;
	bHMIMoveRobotXplus : BOOL;
	bHMIMoveRobotYneg : BOOL;
	bHMIMoveRobotYplus : BOOL;
	bHMIMoveRobotZneg : BOOL;
	bHMIMoveRobotZplus : BOOL;
	bHMIEnableMovement : BOOL;
	rTrigEnableMovement : R_TRIG;
	
	// settings.content indicators
	sHMISettingsMessage : STRING(80);
	// selectProgram.content inputs
	programWallChoice	: USINT; // 1 for front wall, 2 for back wall, 10 for option 3-16 for additional options
	programOption1		: BOOL; //Front wall: True: E cut, False, no e cut Back wall: True: STDWindow, False, no window
	programOption2		: BOOL; //Front wall: True: glass door, False, wood door Back wall: True: Chimney cut, False, no chimney cut
	programOption3		: BOOL; //Front wall: True: Door lock, false, no lock Back wall: NA
	boardWidthIs51inches : BOOL := TRUE; //1 if board width is 5.1 inches, 0 if 4.75inches
	bHMIRunProgramScreen		: BOOL; 
	rTrigRunProgramScreen		: R_TRIG;
	//=============Programs====================
	selectedProgram : Program_Type;
	
	// run.content buttons
	bHMIStart				: BOOL; // Button to start program. Called from Run.content
	rTrigStartProgram		: R_TRIG; //
	fTrigStopProgram		: F_TRIG; //
	bHMIHold				: BOOL; // Button to hold program. Called from Run.content
	bHMILoadTool			: BOOL; // Button to activate tool load pushbutton. Called from Run.content
	rTrigLoadTool			: R_TRIG; //
	bHMIToolLoaded			: BOOL; // Button to confirm tool is loaded. Called from Run.content
	rTrigToolLoaded			: R_TRIG; //
	bActivateRollers		: BOOL; // Button to make rollers follow robot. Called from Run.content
	escapeRunScreenEnable	: BOOL := TRUE;
	HMILeaveRunScreen		: BOOL;
	rTrigHMILeaveRunScreen	: R_TRIG;
	bHMIRaiseRollersRunScreen		: BOOL; // Button to switch state into manual mode. TODO: make
	
	// run.content indicators
	sHMIPneumaticsOK		: BOOL; // Indicator light of pneumatic pressure, called from run.content
	sHMIRobotHomed			: BOOL; // Indicator light of robot homed, called from run.content. Todo: Change colour/text when activated
	sHMIRollersActivated	: BOOL; // Indicator light of rollers activated, called from run.content
	sHMIeStopsOff			: BOOL; // Indicator light of e stops off, called from run.content
	sHMIDustCollectionOn AT %I*	: BOOL;
	sProgramString			: STRING;
	sHMIDisplayMessage		: STRING; //Run display
	sHMIIsError				: BOOL; //
	
	// Error states
	eInitializeServos : Structure_Error;
	powerUp				: BOOL := TRUE;
	overrideErrors		: BOOL := FALSE; //FOR  DEBUGGING PURPOSES ONLY
	disableSpindle		: BOOL := FALSE; //FOR DEBUGGING PURPOSES ONLY
	toolMatchTimer : TON;
	sHMIPopup			: BOOL;
	popupMessage		: STRING(300);
	popUpAutoReset		: BOOL;
	popupRefreshTimer: TON;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Call of actions
	// Init
	overrideErrors := FALSE;
	disableSpindle := FALSE;
	//HMI update
	// Update each HMI indicator
	sHMIRobotHomed := fbRobot.inRobotAtHome;
	sHMIRollersActivated := bActivateRollers AND GVL_Axes.AxisWest.Status.Homed;
	sHMIeStopsOff := NOT fbRobot.inRobotError;
	IF fbSpindle.toolSelectedAtInitialization THEN
		sHMICurrentTool := fbSpindle.currentTool.toolNumber;
	END_IF
	sHMIeSystemStateString	:= TO_STRING(eSystemState);
	IF fbEnclosure.doorIsClosed THEN
		sHMIDoorStatus := 'Open Door';
	ELSE
		sHMIDoorStatus := 'Close Door';
	END_IF
	
	// Mode and state requests
	Change_State();  // Changes state based on inputs
	State_Machine(); // Calls functions based on state
	fbgetSlaveState(sNetId := '172.18.239.23.3.1', nSlaveAddr := 1016, bExecute := executeGetSlaveState); //slave state of controller
	
	// Update robot IOs
	fbRobot();
	robotPose := fbRobot.Update_Pose();
	fbRobot.Update_Spindle_Status(spindleStopped := fbSpindle.spindleIsStopped);
	fbGantry();
	fbEnclosure();
	fbSpindle();
	fbTorqueSensor();
	fbOperatingCounter(stateString := sHMIeSystemStateString);
	
	//Safety
	ErrorAcknowledge := safetyPLCError OR safetyPLCEStopOut OR safetyPLCComErr OR safetyPLCFBErr OR safetyPLCOtherErr;
	
// HMI button triggers
	rTrigHomeRobot(CLK := bHMIHomeRobot);
	rTrigHomeMotors(CLK := bHMIHomeMotors);
	rTrigOpenCloseDoor(CLK := bHMIOpenCloseDoor);
	rTrigLockTables(CLK := bHMILockTables);
	rTrigRaiseRollers(CLK := bHMILowerRaiseRollers);
	rTrigWarmupSpindle(CLK := bHMIWarmupSpindle);
	rTrigRunProgramScreen(CLK := bHMIRunProgramScreen);
	rTrigStartProgram(CLK := bHMIStart);
	rTrigLoadTool(CLK := bHMILoadTool);
	rTrigToolLoaded(CLK := bHMIToolLoaded);
	rTrigResetErrors(CLK := bHMIReset);
	rTrigChangeTool(CLK := bHMIChangeTool);
	rTrigGoToCleanupRobot(CLK := bHMIGoToCleanupPosition);
	rTrigEnableMovement(CLK := bHMIEnableMovement);
	
	fTrigOpenCloseDoor(CLK := bHMIOpenCloseDoor);
	fTrigUnlockTables(CLK := bHMILockTables);
	fTrigLowerRollers(CLK := bHMILowerRaiseRollers);
	fTrigStopSpindle(CLK := bHMIWarmupSpindle);
	fTrigInProgramRunning(CLK := fbRobot.inRobotProgramRunning);
	rTrigInRobotToolUpdated(CLK := fbRobot.inRobotToolUpdated);
	fTrigStopProgram(CLK := bHMIStart);
	fTrigStopChangeTool(CLK := bHMIChangeTool);
	rTrigHMILeaveRunScreen(CLK := HMILeaveRunScreen);
	fTrigMoveServosNorth(CLK := bHMIMoveServosNorth);
	fTrigMoveServosSouth(CLK := bHMIMoveServosSouth);
	
	timerReset(IN := startTimerReset, PT := t#10s);

	IF rTrigHMILeaveRunScreen.Q THEN
		fbRobot.Stop_Robot_Program(forgetProgram := TRUE);
		bHMIStart := FALSE;
		HMILeaveRunScreen := FALSE;
	ELSE
		HMILeaveRunScreen := FALSE;
	END_IF
	
	IF fbRobot.timerOutRobotStartProgram.Q THEN
		Popup_Error('Robot not started after 20 seconds. Check if robot is in cycle mode', TRUE);
	END_IF]]></ST>
    </Implementation>
    <Folder Name="StateMachine" Id="{b4b3eed7-4e15-4350-a74a-294b50706019}" />
    <Method Name="Change_State" Id="{11427209-76ae-4b9c-9f30-0498e05b4968}" FolderPath="StateMachine\">
      <Declaration><![CDATA[METHOD Change_State
VAR_INPUT
END_VAR
VAR
	errorState : Structure_Error;
	temp: BOOL;
END_VAR


]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Initialize -> Run
errorState := Run_Error();
IF overrideErrors = TRUE THEN
	errorState.isError := FALSE;
END_IF

IF errorState.isError AND eSystemState <> E_MachineState.RESET AND eSystemState <> E_MachineState.ERROR THEN
	escapeRunScreenEnable := TRUE;
	eSystemState := E_MachineState.ERROR;
	Popup_Error(errorState.errorMessage, TRUE);
	fbSpindle.Dust_Hood(x_pose := 0, enable := FALSE);
	eSystemState := E_MachineState.ERROR; 
	bHMIStart := FALSE;
	bHMIHold := FALSE;
	bHMIRaiseRollersRunScreen := FALSE;
	timerRun(IN := FALSE, PT := T#10S);
END_IF

CASE eSystemState OF
	E_MachineState.ERROR:
		escapeRunScreenEnable := TRUE;
		IF rTrigResetErrors.Q THEN
			startTimerReset := TRUE;
			eSystemState := E_MachineState.RESET;
		END_IF
		
	E_MachineState.INITIALIZATION:
		escapeRunScreenEnable := TRUE;
		IF rTrigStartProgram.Q AND NOT errorState.isError THEN
			IF fbEnclosure.cylinderTableWest AND fbEnclosure.cylinderTableEast AND fbSpindle.CurrentTool.toolNumber = fbRobot.inRobotToolNumberRequest THEN
				HMILeaveRunScreen := FALSE;
				eSystemState := E_MachineState.RUN;
				fbRobot.Program_Select(programChoice := programWallChoice, option1 := programOption1, option2 := programOption2, option3 := programOption3, boardWidthIs51 := boardWidthIs51inches);
				IF NOT disableSpindle THEN
					fbSpindle.Start_Spindle(spindleSpeed := fbSpindle.currentTool.speed);
				END_IF
				fbRobot.Start_Robot();
			ELSE
				Popup_Error('Tables not locked or not the right tool', TRUE);
				bHMIStart := FALSE;
			END_IF
		END_IF
		
		IF rTrigResetErrors.Q THEN
			startTimerReset := TRUE;
			eSystemState := E_MachineState.RESET;
		END_IF
		
		IF rTrigChangeTool.Q THEN
			IF fbSpindle.Verify_Tool_Change_Request(sHMICurrentTool, sHMIRequestedTool) THEN
				eSystemState := E_MachineState.TOOLCHANGEINIT;
				fbRobot.Update_Tool(current := INT_TO_USINT(sHMICurrentTool), request := INT_TO_USINT(sHMIRequestedTool));
				IF NOT fbSpindle.Update_Current_Tool(toolNumber := sHMICurrentTool) THEN
					Popup_Error('Update Tool Failed - invalid tool number', TRUE);
				END_IF
				fbRobot.Program_Select(programChoice := 10, programOption1, programOption2, programOption3, boardWidthIs51inches);
				fbRobot.Start_Robot();
			ELSE
				Popup_Error('Tool present in destination tool holder, or tool not present in pickup tool holder. Fix and try to change tool again. If false, check tool limit switches', TRUE);
				bHMIChangeTool := FALSE;
			END_IF
		END_IF
		
	E_MachineState.RUN:
		timerRun(IN := TRUE, PT := T#10S);
		escapeRunScreenEnable := FALSE;
		IF (fTrigStopProgram.Q OR fTrigInProgramRunning.Q) AND NOT errorState.isError THEN
			eSystemState := E_MachineState.INITIALIZATION;
			fbSpindle.Dust_Hood(x_pose := 0, enable := FALSE);
			fbSpindle.Stop_Spindle();
			fbRobot.Stop_Robot_Program(forgetProgram := FALSE);
			fbGantry.Lower_Raise_Rollers(raiseRollers := TRUE);
			bHMIStart := FALSE;
			bHMIHold := FALSE;
			bHMIRaiseRollersRunScreen := FALSE;
			timerRun(IN := FALSE, PT := T#10S);
			bActivateRollers := FALSE;
		END_IF
		
		IF fbRobot.inRobotToolNumberRequest <> fbSpindle.currentTool.toolNumber THEN
			fbSpindle.Stop_Spindle();
			fbSpindle.Dust_Hood(x_pose := 0, enable := FALSE);
			IF fbSpindle.Verify_Tool_Change_Request(fbSpindle.currentTool.toolNumber, fbRobot.inRobotToolNumberRequest) THEN
				eSystemState := E_MachineState.TOOLCHANGERUN;
				eRequestedState := E_MachineState.TOOLCHANGERUN;
				fbSpindle.Update_Requested_Tool(toolNumber := fbRobot.inRobotToolNumberRequest);
			ELSE
				Popup_Error('Tool present in destination tool holder, or tool not present in pickup tool holder. Error thrown, program restart. If false, check tool limit switches', TRUE);
				eSystemState := E_MachineState.ERROR;
			END_IF
			timerRun(IN := FALSE, PT := T#10S);
			toolMatchTimer(IN := FALSE);
		END_IF
		
		//Check robot tool coordinates
		toolMatchTimer(IN := NOT fbRobot.Robot_Coords_Match_Tool(current_Tool := fbSpindle.currentTool) AND fbRobot.outRobotRunHold, PT:=T#3S);
		IF toolMatchTimer.Q THEN
			Popup_Error('Tool coordinates in robot program do not match the current tools coordinates', TRUE);
			eSystemState := E_MachineState.ERROR;
			timerRun(IN := FALSE, PT := T#10S);
		END_IF
		
	E_MachineState.RESET:
		escapeRunScreenEnable := TRUE;
		IF resetSuccessful THEN
			startTimerReset := False;
			eSystemState := E_MachineState.INITIALIZATION;
			bActivateRollers := FALSE;
			resetSuccessful := FALSE;
		END_IF
		
		IF timerReset.Q THEN
			startTimerReset := FALSE;
			Popup_Error('Reset unsuccessful. Check error list', TRUE);
			eSystemState := E_MachineState.ERROR;
		END_IF
		
	E_MachineState.TOOLCHANGERUN:
		CASE eRequestedState OF
			E_MachineState.RUN:
				eSystemState := E_MachineState.RUN;
				fbSpindle.Manual_Tool_Change(changeToolEnable := FALSE);
				fbSpindle.Start_Spindle(spindleSpeed := fbSpindle.currentTool.speed);
			
			E_MachineState.INITIALIZATION:
				eSystemState := E_MachineState.INITIALIZATION;
				fbSpindle.Stop_Spindle();
				fbRobot.Stop_Robot_Program(forgetProgram := FALSE);
				fbGantry.Lower_Raise_Rollers(raiseRollers := TRUE);
				bHMIStart := FALSE;
				IF fbRobot.inRobotToolNumberRequest = fbRobot.inRobotToolNumberCurrent THEN
					IF NOT fbSpindle.Update_Current_Tool(toolNumber := fbRobot.inRobotToolNumberCurrent) THEN
						Popup_Error('Invalid tool number', TRUE);
					END_IF;	
				END_IF
		END_CASE
		
	E_MachineState.TOOLCHANGEINIT:
		escapeRunScreenEnable := TRUE;
		IF fTrigInProgramRunning.Q THEN
			IF NOT fbSpindle.Update_Current_Tool(toolNumber := fbRobot.inRobotToolNumberCurrent) THEN
				Popup_Error('Invalid tool number', TRUE);
			END_IF;
			eSystemState := E_MachineState.INITIALIZATION;
			bHMIChangeTool := FALSE;
			fbRobot.Update_Tool(current := fbRobot.inRobotToolNumberCurrent, request := fbRobot.inRobotToolNumberCurrent);
		END_IF
		
		IF fTrigStopChangeTool.Q THEN
			fbRobot.Stop_Robot_Program(forgetProgram := FALSE);
			eSystemState := E_MachineState.INITIALIZATION;
		END_IF
END_CASE

]]></ST>
      </Implementation>
    </Method>
    <Method Name="Operating_Error" Id="{34eb4b26-0b5c-454b-a500-c33be7205698}" FolderPath="StateMachine\">
      <Declaration><![CDATA[METHOD Operating_Error
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Turn off spindle
fbSpindle.Stop_Spindle();
//Stop robot
fbRobot.ForceStop_Robot();
//Stop Servos
fbGantry.Stop_Servos();
fbGantry.Manual_Move_Servos(1, FALSE);
fbEnclosure.Table_Clamp_Control_Pushbutton();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Operating_Hold" Id="{d9f86694-1d0b-4add-8c20-fb8a5acf1092}" FolderPath="StateMachine\">
      <Declaration><![CDATA[METHOD Operating_Hold
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="Operating_Initialization" Id="{a0909845-20b7-4f19-88c6-a128d86fcc8b}" FolderPath="StateMachine\">
      <Declaration><![CDATA[METHOD Operating_Initialization
VAR_INPUT
END_VAR
VAR
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Enables pushbutton table locking capability
fbEnclosure.Table_Clamp_Control_Pushbutton();

fbRobot.Robot_Manual_Control(bHMIMoveRobotXneg, bHMIMoveRobotXplus, bHMIMoveRobotYneg, bHMIMoveRobotYplus, bHMIMoveRobotZneg,bHMIMoveRobotZplus); 

//Keeps the spindle off for safety, redundant
IF NOT fbSpindle.spindleWarmupOn THEN
	fbSpindle.Stop_Spindle();
END_IF

//Initializes robot on power on
IF powerUp THEN
	fbRobot.Init_Robot();
	powerUp := FALSE;
END_IF

//Home robot operation on button press
IF rTrigHomeRobot.Q THEN
//	fbRobot.Home_Robot();
	fbRobot.Program_Select(programChoice := 12, programOption1, programOption2, programOption3, boardWidthIs51inches);
	fbRobot.Start_Robot();
END_IF

//Robot moves out of the way on button press
IF rTrigGoToCleanupRobot.Q THEN
//	fbRobot.Go_To_Cleanup();
	fbRobot.Program_Select(programChoice := 13, programOption1, programOption2, programOption3, boardWidthIs51inches);
	fbRobot.Start_Robot();
	fbGantry.Home_Servos(robotPose);
	bActivateRollers := FALSE;
END_IF

//Home servomotors on button press
IF rTrigHomeMotors.Q THEN
	fbGantry.Lower_Raise_Rollers(raiseRollers := TRUE); //Done, tested
	eInitializeServos := fbGantry.Home_Servos(robotPose := fbRobot.robotPose); //Done, tested
	IF eInitializeServos.isError THEN
		Popup_Error(eInitializeServos.errorMessage, TRUE);
	END_IF
END_IF

//Open/close rolling door
IF rTrigOpenCloseDoor.Q THEN
	fbEnclosure.Rolling_Door_HMI_Operation(); //Done, TODO: integrate sensor
END_IF

IF fTrigOpenCloseDoor.Q THEN
	fbEnclosure.Rolling_Door_HMI_Operation(); //Done, tested no door
END_IF

//Lock/unlock tables
IF rTrigLockTables.Q THEN
	fbEnclosure.Table_Clamp_Control_HMI(eastTableLock := TRUE, westTableLock := TRUE); //Done, tested
END_IF

IF fTrigUnlockTables.Q THEN
	fbEnclosure.Table_Clamp_Control_HMI(eastTableLock := FALSE, westTableLock := FALSE); //Done, tested
END_IF

//Raise/lower rollers
IF rTrigRaiseRollers.Q THEN
	fbGantry.Lower_Raise_Rollers(raiseRollers := TRUE); //Done, tested
END_IF

IF fTrigLowerRollers.Q THEN
	fbGantry.Lower_Raise_Rollers(raiseRollers := FALSE); //Done, tested
END_IF

//Warmup spindle
IF rTrigWarmupSpindle.Q THEN
	IF fbSpindle.toolSelectedAtInitialization AND fbSpindle.currentTool.toolNumber <> 0 THEN
		fbSpindle.Spindle_Warmup(); //Done, tested. TODO: Change spindle is warm flag if spindle hasn't been on for >3 hours
	ELSE
		Popup_Error('Tool hasnt been picked (change tool), OR sawblade loaded', TRUE);
		bHMIWarmupSpindle := FALSE;
	END_IF
END_IF

IF fbSpindle.fTrigWarm3.Q THEN
	bHMIWarmupSpindle := FALSE;
END_IF

IF fTrigStopSpindle.Q THEN
	fbSpindle.Stop_Spindle(); 
END_IF

//Save program to robot and PLC
IF rTrigRunProgramScreen.Q THEN
	fbRobot.Program_Select(programChoice := programWallChoice, option1 := programOption1, option2 := programOption2, option3 := programOption3, boardwidthis51 := boardWidthIs51inches);
	Update_Program_String();
	bHMIRunProgramScreen := FALSE;
END_IF

//Update requested tool for display on HMI
IF rTrigInRobotToolUpdated.Q THEN
	fbSpindle.Update_Requested_Tool(toolNumber := fbRobot.inRobotToolNumberRequest);
END_IF

//Manual tool change enabled if spindle is stopped
IF fbSpindle.spindleIsStopped THEN
	fbSpindle.Manual_Tool_Change(changeToolEnable := TRUE);
END_IF

//Activate Rollers
IF bActivateRollers THEN
	IF GVL_Axes.AxisWest.Status.Homed THEN
		IF fbRobot.inRobotPoseDataIsSent THEN
			fbGantry.Follow_Robot(robotPoseGantry := robotPose);
		ELSE
			Popup_Error('Robot posedata program not running', TRUE);
			bActivateRollers := FALSE;
		END_IF
	ELSE
		Popup_Error('Gantry not homed', TRUE);
		bActivateRollers := FALSE;
	END_IF
END_IF

//Jog rollers
IF bHMIMoveServosNorth THEN
	IF GVL_Axes.AxisWest.Status.Homed AND GVL_Axes.AxisEast.Status.Coupled THEN
		fbGantry.Manual_Move_Servos(direction := -1, moveServos := TRUE);
		sHMISettingsMessage := '';
	ELSE
		Popup_Error('Motor not homed or coupled', TRUE);
		bHMIMoveServosNorth := FALSE;
		sHMISettingsMessage := 'Motor not homed or coupled';
	END_IF
END_IF

IF bHMIMoveServosSouth THEN
	IF GVL_Axes.AxisWest.Status.Homed AND GVL_Axes.AxisEast.Status.Coupled THEN
		fbGantry.Manual_Move_Servos(direction := 1, moveServos := TRUE);
		sHMISettingsMessage := '';
	ELSE
		Popup_Error('Motor not homed or coupled', TRUE);
		bHMIMoveServosNorth := FALSE;
		sHMISettingsMessage := 'Motor not homed or coupled';
	END_IF
END_IF

IF fTrigMoveServosNorth.Q OR fTrigMoveServosSouth.Q THEN
	fbGantry.Manual_Move_Servos(direction := -1, moveServos := FALSE);
END_IF

IF rTrigEnableMovement.Q THEN
	fbRobot.Program_Select(programChoice := 11, programOption1, programOption2, programOption3, boardWidthIs51inches);
	fbRobot.Start_Robot();
END_IF

//Make sure that the robot has received the program selected request
IF fbRobot.outRobotProgramSelected AND fbRobot.outRobotProgramChoice <> fbRobot.inRobotCurrentProgram THEN
	timerProgramIsSelected(IN := TRUE, PT := T#0.5S);
	IF timerProgramIsSelected.Q THEN
		IF fbRobot.inRobotAtHome AND fbRobot.outRobotProgramChoice = 12 THEN 
			fbRobot.Turn_Off_Program_Selected();
			timerProgramIsSelected(IN := FALSE);
		ELSIF fbRobot.inRobotAtCleanPosition AND fbRobot.outRobotProgramChoice = 13 THEN
			fbRobot.Turn_Off_Program_Selected();
			timerProgramIsSelected(IN := FALSE);
		ELSE
			Popup_Error('Robot program not updated', TRUE);
			timerProgramIsSelected(IN := FALSE);
			IF fbRobot.outRobotProgramChoice >= 10 THEN //If program selected is home robot, change tool, go to cleanup position or manual move then
				fbRobot.Stop_Robot_Program(forgetProgram := TRUE);
			ELSE
				fbRobot.Stop_Robot_Program(forgetProgram := FALSE);
			END_IF
		END_IF
	END_IF
ELSE
	timerProgramIsSelected(IN := FALSE);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Operating_ManualMove" Id="{e062f620-36f2-4ef0-9468-9f06db1c52fd}" FolderPath="StateMachine\">
      <Declaration><![CDATA[METHOD Operating_ManualMove
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="Operating_Reset" Id="{409ce780-c7de-4e8c-a0bb-25edc8e53879}" FolderPath="StateMachine\">
      <Declaration><![CDATA[METHOD Operating_Reset
VAR_INPUT
END_VAR
VAR
	robotReset	: BOOL;
	gantryReset : BOOL;
	spindleReset : BOOL;
	state           : ST_EcSlaveState;
	count			: INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Robot reset
robotReset := fbRobot.Reset_Robot();
//Servo Reset
gantryReset := fbGantry.Reset_Servos();
//VFD Reset
spindleReset := fbSpindle.Reset_Drive();
//Safety Reset
IF NOT safetyPLCEStopOut THEN
	errorReset := NOT errorReset;
END_IF

executeGetSlaveState := NOT executeGetSlaveState;

IF NOT fbgetSlaveState.bBusy THEN
	state := fbgetSlaveState.state;
	executeSetSlaveState := NOT executeSetSlaveState;
	//IF NOT executeGet
	CASE state.deviceState OF
		1:
			fbSetSlaveState(sNetId := '172.18.239.23.3.1', nSlaveAddr := 1016, bExecute := executeSetSlaveState, reqState := 2);
		2:
			fbSetSlaveState(sNetId := '172.18.239.23.3.1', nSlaveAddr := 1016, bExecute := executeSetSlaveState, reqState := 4);
		4:
			fbSetSlaveState(sNetId := '172.18.239.23.3.1', nSlaveAddr := 1016, bExecute := executeSetSlaveState, reqState := 8);
		8: 
		0:
		ELSE
			fbSetSlaveState(sNetId := '172.18.239.23.3.1', nSlaveAddr := 1016, bExecute := executeSetSlaveState, reqState := 1);
	END_CASE
ELSE
//	executeGetSlaveState := FALSE;
//	executeSetSlaveState := FALSE;
END_IF

IF robotReset AND gantryReset AND spindleReset AND safetyPLCEStopOut THEN
	resetSuccessful := TRUE;
	errorReset := FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Operating_Run" Id="{39f52282-3ce5-4d02-b41e-113893603b81}" FolderPath="StateMachine\">
      <Declaration><![CDATA[METHOD Operating_Run
VAR
	robotRun : BOOL;
	toolNumber: INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Follow robot
IF fbRobot.inRobotPoseDataIsSent THEN
	robotRun := fbGantry.Follow_Robot(robotPoseGantry := fbRobot.robotPose);
ELSE 
	robotRun := FALSE;
	Popup_Error('Robot pose data not being sent', TRUE);
END_IF

IF fbSpindle.spindleIsStopped THEN
	fbSpindle.Start_Spindle(spindleSpeed := fbSpindle.currentTool.speed);
END_IF

IF ABS(fbSpindle.spindleSpeed - fbSpindle.CurrentTool.speed) > 2000 THEN
	IF timerRun.Q THEN
		Popup_Error('Spindle not up to speed after 10s', TRUE);
	END_IF
	robotRun := FALSE;
END_IF

//dust boot
fbSpindle.Dust_Hood(x_pose := fbRobot.robotPose.xPose, enable := TRUE);

IF bHMIHold THEN
	fbRobot.RunHold_Robot(RunHold := FALSE);
ELSE
	fbRobot.RunHold_Robot(RunHold := robotRun);
END_IF

//Cylinder raise/lower
IF bHMIRaiseRollersRunScreen THEN
	fbGantry.Lower_Raise_Rollers(raiseRollers := TRUE);
ELSE
	fbGantry.Cylinder_Set_Cutting();
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Operating_ToolChangeInit" Id="{a53a4ada-9fc9-4809-accd-3119d32560e7}" FolderPath="StateMachine\">
      <Declaration><![CDATA[METHOD Operating_ToolChangeInit : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbSpindle.Stop_Spindle();
fbSpindle.Dust_Hood(x_pose := 0, enable := FALSE);

//Tool change auto
IF fbRobot.inRobotReleaseTool THEN
	fbSpindle.Release_Tool();
	fbRobot.Release_Update(release := fbSpindle.spindleToolOpen);
ELSE
	fbSpindle.Grab_Tool();
	fbRobot.Release_Update(release := NOT fbSpindle.spindleToolLocked);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Operating_ToolChangeRun" Id="{547d6147-7362-437f-81c7-269a347643cf}" FolderPath="StateMachine\">
      <Declaration><![CDATA[METHOD Operating_ToolChangeRun : BOOL
VAR_INPUT
END_VAR
VAR
	runHoldToolChangeRun : BOOL := TRUE;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Ensure Spindle stays off and dust hood raised
fbSpindle.Stop_Spindle();
fbSpindle.Dust_Hood(x_pose := 0, enable := FALSE);

//Can't leave run screen
escapeRunScreenEnable := FALSE;

//Release tool when requested by robot
IF fbRobot.inRobotReleaseTool THEN
	fbSpindle.Release_Tool();
	fbRobot.Release_Update(release := fbSpindle.spindleToolOpen);
ELSE
	fbSpindle.Grab_Tool();
	fbRobot.Release_Update(release := NOT fbSpindle.spindleToolLocked);
END_IF

//If robot is done tool change
IF fbRobot.inRobotToolNumberRequest = fbRobot.inRobotToolNumberCurrent THEN
//	popupRefreshTimer(IN:=TRUE, PT :=T#10S); //Timer to not have constant popups
//	IF popupRefreshTimer.Q THEN
//		Popup_Error(CONCAT(CONCAT('Press tool loaded if ', fbSpindle.currentTool.name), ' is loaded to resume program. If not, can hold green button on spindle for three seconds to change manually'), TRUE);
//		popupRefreshTimer(IN:=FALSE, PT :=T#10S);
//	END_IF
	IF NOT fbSpindle.Update_Current_Tool(toolNumber := fbRobot.inRobotToolNumberCurrent) THEN
		Popup_Error('Invalid tool number', TRUE);
		eRequestedState := E_MachineState.ERROR;
		JMP _endOfMethod;
	END_IF;
	runHoldToolChangeRun := FALSE;
	fbSpindle.Manual_Tool_Change(changeToolEnable := TRUE);
	IF rTrigToolLoaded.Q THEN
		eRequestedState := E_MachineState.RUN;
	END_IF
END_IF

//If stop the prgram, go to initialization
IF (fTrigStopProgram.Q OR fTrigInProgramRunning.Q) THEN
	eRequestedState := E_MachineState.INITIALIZATION;
END_IF

IF bHMIHold THEN
	fbRobot.RunHold_Robot(RunHold := FALSE);
ELSE
	fbRobot.RunHold_Robot(RunHold := runHoldToolChangeRun);
END_IF

 _endOfMethod:
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Popup_Error" Id="{91697594-94e7-4343-b014-e3f122042295}">
      <Declaration><![CDATA[METHOD Popup_Error : BOOL
VAR_INPUT
	message : STRING (300);
	automaticReset : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[popupMessage := message;
sHMIpopup := TRUE;
popUpAutoReset := automaticReset;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Run_Error" Id="{2631638b-9fb7-4314-b8bc-31ebf56164cd}">
      <Declaration><![CDATA[METHOD Run_Error : Structure_Error
VAR_INPUT
END_VAR
VAR
	//0: robot, 1: servos, 2: E-stops, 3: Door, 4: Pneumatics, 5: Spindle, 6: Tool changing
	pneumaticsError : Structure_Error;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Run_Error.errorMessage := '';
Run_Error.isError := FALSE;
//Robot Error
IF fbRobot.inRobotError THEN
	Run_Error.errorMessage := CONCAT(Run_Error.errorMessage,'\nRobot error, check teach pendant');
	Run_Error.isError := TRUE;
	Run_Error.errorType.0 := TRUE;
ELSE
	Run_Error.errorType.0 := TRUE;
END_IF

IF NOT fbRobot.inRobotPoseDataIsSent THEN
	Run_Error.isError := TRUE;
	Run_Error.errorType.0 := TRUE;
	Run_Error.errorMessage := CONCAT(Run_Error.errorMessage,'\nRobot pose data program not running');
END_IF

IF fbRobot.inRobotEStopOn THEN
	Run_Error.errorMessage := CONCAT(Run_Error.errorMessage, '\nRobot E Stop On');
	Run_Error.isError := TRUE;
	Run_Error.errorType.2 := TRUE;
ELSE
	Run_Error.errorType.2 := FALSE;
END_IF


//Servos error
IF GVL_Axes.AxisWest.Status.Error THEN
	Run_Error.errorMessage := CONCAT(Run_Error.errorMessage, CONCAT('\nwest gantry error: ', UDINT_TO_STRING(GVL_Axes.AxisWest.Status.ErrorID)));
	Run_Error.isError := TRUE;
	Run_Error.errorType.1 := TRUE;
ELSE
	Run_Error.errorType.1 := FALSE;
END_IF

IF GVL_Axes.AxisEast.Status.Error THEN
	Run_Error.errorMessage := CONCAT(Run_Error.errorMessage, CONCAT('\neast gantry error: ', UDINT_TO_STRING(GVL_Axes.AxisWest.Status.ErrorID)));
	Run_Error.isError := TRUE;
	Run_Error.errorType.1 := TRUE;
ELSE
	Run_Error.errorType.1 := FALSE;
END_IF

//Torque sensor error Todo: implement

//E-stop/safety system error Todo: 
IF NOT safetyPLCEStopOut THEN
	Run_Error.isError := TRUE;
	Run_Error.errorType.2 := TRUE;
	Run_Error.errorMessage := CONCAT(Run_Error.errorMessage, '\nSafety PLC in Error');
END_IF

//Door error
//IF fbEnclosure.doorIsOpen THEN
//	Run_Error.errorMessage := CONCAT(Run_Error.errorMessage,'\nDoorIsOpen');
//	Run_Error.isError := TRUE;
//	Run_Error.errorType.3 := TRUE;
//ELSE
//	Run_Error.errorType.3 := FALSE;
//END_IF

//Pneumatics error
pneumaticsError := fbGantry.Pneumatics_Error();

IF pneumaticsError.isError THEN
	Run_Error.errorMessage := CONCAT(Run_Error.errorMessage, pneumaticsError.errorMessage);
	Run_Error.isError := TRUE;
	Run_Error.errorType.4 := TRUE;
	sHMIPneumaticsOK := FALSE;
ELSE
	Run_Error.errorType.4 := FALSE;
	sHMIPneumaticsOK := TRUE;
END_IF

//Spindle error
IF fbSpindle.spindleError THEN
	Run_Error.errorMessage := CONCAT(Run_Error.errorMessage, '\nSpindleError');
	Run_Error.isError := TRUE;
	Run_Error.errorType.5 := TRUE;
ELSE 
	Run_Error.errorType.5 := FALSE;
END_IF

sHMIIsError := Run_Error.isError;
IF Run_Error.errorMessage = '' THEN
	sHMIErrorDisplay := 'No Errors';
ELSE
	sHMIErrorDisplay := MID(Run_Error.errorMessage, LEN(Run_Error.errorMessage) - 1, 3);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="State_Machine" Id="{f466ced8-b935-49bf-a90d-d8b2d5bdc64e}" FolderPath="StateMachine\">
      <Declaration><![CDATA[// Calls functions based on state
METHOD State_Machine 
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE eSystemState OF
	E_MachineState.INITIALIZATION:
		Operating_Initialization();
	
//	E_MachineState.MANUALMOVE:
//		Operating_ManualMove(); //TODO: Implement
		
	E_MachineState.RUN:
		Operating_Run();
		
	E_MachineState.RESET:
		Operating_Reset();
		
	E_MachineState.ERROR:
		Operating_Error();
		
	E_MachineState.TOOLCHANGERUN:
		Operating_ToolChangeRun();
		
	E_MachineState.TOOLCHANGEINIT:
		Operating_ToolChangeInit();
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="Update_Program_String" Id="{65642f34-04a0-419f-b222-9cff5bf3d802}">
      <Declaration><![CDATA[METHOD Update_Program_String
VAR
	option1string			: STRING;
	option2string			: STRING;
	option3string			: STRING;
	boardwidthstring		: STRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE programWallChoice OF
        1: selectedProgram := GVL_Programs.FrontWall;
        2: selectedProgram := GVL_Programs.BackWall;
        3: selectedProgram := GVL_Programs.Option3;
        4: selectedProgram := GVL_Programs.Option4;
        // Add more cases for additional options if needed
        ELSE
            // Handle invalid program wall choice
    END_CASE;

IF programOption1 THEN
	option1string := selectedProgram.option1true;
ELSE
	option1string := selectedProgram.option1false;
END_IF

IF programOption2 THEN
	option2string := selectedProgram.option2true;
ELSE
	option2string := selectedProgram.option2false;
END_IF

IF programOption3 THEN
	option3string := selectedProgram.option3true;
ELSE
	option3string := selectedProgram.option3false;
END_IF

IF boardWidthIs51inches THEN
	boardwidthstring := '- 5.1in board';
ELSE
	boardwidthstring := '- 4.75in board';
END_IF

sProgramString := CONCAT(CONCAT(CONCAT(CONCAT(CONCAT(CONCAT(CONCAT(selectedProgram.programName,' - '), option1string),' - '),option2string),' - '), option3string), boardwidthstring);]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_Machine">
      <LineId Id="108" Count="0" />
      <LineId Id="602" Count="1" />
      <LineId Id="1017" Count="0" />
      <LineId Id="605" Count="3" />
      <LineId Id="610" Count="0" />
      <LineId Id="1761" Count="2" />
      <LineId Id="1998" Count="0" />
      <LineId Id="2245" Count="1" />
      <LineId Id="2248" Count="1" />
      <LineId Id="2247" Count="0" />
      <LineId Id="152" Count="0" />
      <LineId Id="113" Count="0" />
      <LineId Id="370" Count="0" />
      <LineId Id="115" Count="0" />
      <LineId Id="2232" Count="0" />
      <LineId Id="188" Count="1" />
      <LineId Id="150" Count="0" />
      <LineId Id="572" Count="0" />
      <LineId Id="2817" Count="0" />
      <LineId Id="464" Count="1" />
      <LineId Id="463" Count="0" />
      <LineId Id="2369" Count="0" />
      <LineId Id="2493" Count="0" />
      <LineId Id="1130" Count="1" />
      <LineId Id="1255" Count="0" />
      <LineId Id="124" Count="0" />
      <LineId Id="346" Count="5" />
      <LineId Id="127" Count="0" />
      <LineId Id="468" Count="0" />
      <LineId Id="585" Count="0" />
      <LineId Id="587" Count="0" />
      <LineId Id="590" Count="0" />
      <LineId Id="706" Count="0" />
      <LineId Id="807" Count="0" />
      <LineId Id="2371" Count="0" />
      <LineId Id="2675" Count="0" />
      <LineId Id="589" Count="0" />
      <LineId Id="356" Count="2" />
      <LineId Id="353" Count="0" />
      <LineId Id="561" Count="0" />
      <LineId Id="1382" Count="0" />
      <LineId Id="594" Count="0" />
      <LineId Id="911" Count="0" />
      <LineId Id="1387" Count="0" />
      <LineId Id="2534" Count="1" />
      <LineId Id="2113" Count="1" />
      <LineId Id="1392" Count="0" />
      <LineId Id="1389" Count="1" />
      <LineId Id="1518" Count="0" />
      <LineId Id="1393" Count="2" />
      <LineId Id="1887" Count="0" />
      <LineId Id="2235" Count="0" />
      <LineId Id="2239" Count="0" />
      <LineId Id="2242" Count="0" />
      <LineId Id="2236" Count="0" />
    </LineIds>
    <LineIds Name="FB_Machine.Change_State">
      <LineId Id="5" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="227" Count="3" />
      <LineId Id="165" Count="0" />
      <LineId Id="283" Count="0" />
      <LineId Id="166" Count="0" />
      <LineId Id="328" Count="0" />
      <LineId Id="167" Count="1" />
      <LineId Id="276" Count="0" />
      <LineId Id="520" Count="1" />
      <LineId Id="433" Count="0" />
      <LineId Id="163" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="241" Count="0" />
      <LineId Id="282" Count="0" />
      <LineId Id="242" Count="0" />
      <LineId Id="359" Count="0" />
      <LineId Id="243" Count="0" />
      <LineId Id="240" Count="0" />
      <LineId Id="339" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="281" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="436" Count="0" />
      <LineId Id="265" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="403" Count="0" />
      <LineId Id="406" Count="0" />
      <LineId Id="405" Count="0" />
      <LineId Id="407" Count="0" />
      <LineId Id="402" Count="0" />
      <LineId Id="437" Count="1" />
      <LineId Id="508" Count="0" />
      <LineId Id="439" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="427" Count="0" />
      <LineId Id="429" Count="2" />
      <LineId Id="428" Count="0" />
      <LineId Id="123" Count="1" />
      <LineId Id="300" Count="0" />
      <LineId Id="304" Count="2" />
      <LineId Id="321" Count="1" />
      <LineId Id="307" Count="0" />
      <LineId Id="301" Count="2" />
      <LineId Id="308" Count="0" />
      <LineId Id="299" Count="0" />
      <LineId Id="126" Count="0" />
      <LineId Id="16" Count="1" />
      <LineId Id="434" Count="0" />
      <LineId Id="277" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="101" Count="0" />
      <LineId Id="66" Count="0" />
      <LineId Id="193" Count="0" />
      <LineId Id="255" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="518" Count="1" />
      <LineId Id="410" Count="0" />
      <LineId Id="498" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="76" Count="0" />
      <LineId Id="78" Count="0" />
      <LineId Id="91" Count="0" />
      <LineId Id="298" Count="0" />
      <LineId Id="294" Count="0" />
      <LineId Id="79" Count="0" />
      <LineId Id="497" Count="0" />
      <LineId Id="496" Count="0" />
      <LineId Id="295" Count="0" />
      <LineId Id="342" Count="1" />
      <LineId Id="297" Count="0" />
      <LineId Id="411" Count="0" />
      <LineId Id="471" Count="0" />
      <LineId Id="80" Count="0" />
      <LineId Id="269" Count="0" />
      <LineId Id="344" Count="0" />
      <LineId Id="272" Count="0" />
      <LineId Id="274" Count="0" />
      <LineId Id="329" Count="0" />
      <LineId Id="273" Count="0" />
      <LineId Id="432" Count="0" />
      <LineId Id="270" Count="0" />
      <LineId Id="43" Count="1" />
      <LineId Id="280" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="360" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="180" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="361" Count="1" />
      <LineId Id="366" Count="0" />
      <LineId Id="365" Count="0" />
      <LineId Id="363" Count="1" />
      <LineId Id="22" Count="0" />
      <LineId Id="83" Count="0" />
      <LineId Id="474" Count="1" />
      <LineId Id="478" Count="1" />
      <LineId Id="477" Count="0" />
      <LineId Id="480" Count="0" />
      <LineId Id="482" Count="1" />
      <LineId Id="486" Count="3" />
      <LineId Id="491" Count="3" />
      <LineId Id="481" Count="0" />
      <LineId Id="476" Count="0" />
      <LineId Id="122" Count="0" />
      <LineId Id="114" Count="0" />
      <LineId Id="279" Count="0" />
      <LineId Id="115" Count="0" />
      <LineId Id="323" Count="1" />
      <LineId Id="116" Count="0" />
      <LineId Id="121" Count="0" />
      <LineId Id="217" Count="0" />
      <LineId Id="131" Count="0" />
      <LineId Id="113" Count="0" />
      <LineId Id="203" Count="2" />
      <LineId Id="207" Count="0" />
      <LineId Id="206" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="170" Count="0" />
      <LineId Id="169" Count="0" />
    </LineIds>
    <LineIds Name="FB_Machine.Operating_Error">
      <LineId Id="5" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="22" Count="0" />
    </LineIds>
    <LineIds Name="FB_Machine.Operating_Hold">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Machine.Operating_Initialization">
      <LineId Id="191" Count="0" />
      <LineId Id="91" Count="0" />
      <LineId Id="253" Count="0" />
      <LineId Id="252" Count="0" />
      <LineId Id="192" Count="0" />
      <LineId Id="137" Count="0" />
      <LineId Id="110" Count="0" />
      <LineId Id="126" Count="1" />
      <LineId Id="130" Count="0" />
      <LineId Id="138" Count="0" />
      <LineId Id="105" Count="0" />
      <LineId Id="103" Count="0" />
      <LineId Id="111" Count="0" />
      <LineId Id="104" Count="0" />
      <LineId Id="92" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="273" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="271" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="179" Count="2" />
      <LineId Id="274" Count="0" />
      <LineId Id="182" Count="0" />
      <LineId Id="272" Count="0" />
      <LineId Id="185" Count="1" />
      <LineId Id="178" Count="0" />
      <LineId Id="193" Count="0" />
      <LineId Id="19" Count="1" />
      <LineId Id="145" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="161" Count="2" />
      <LineId Id="18" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="23" Count="2" />
      <LineId Id="22" Count="0" />
      <LineId Id="59" Count="2" />
      <LineId Id="58" Count="0" />
      <LineId Id="194" Count="0" />
      <LineId Id="27" Count="2" />
      <LineId Id="26" Count="0" />
      <LineId Id="64" Count="2" />
      <LineId Id="63" Count="0" />
      <LineId Id="195" Count="0" />
      <LineId Id="31" Count="1" />
      <LineId Id="39" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="68" Count="2" />
      <LineId Id="67" Count="0" />
      <LineId Id="196" Count="0" />
      <LineId Id="35" Count="1" />
      <LineId Id="154" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="155" Count="1" />
      <LineId Id="177" Count="0" />
      <LineId Id="157" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="113" Count="0" />
      <LineId Id="112" Count="0" />
      <LineId Id="114" Count="1" />
      <LineId Id="72" Count="2" />
      <LineId Id="71" Count="0" />
      <LineId Id="197" Count="0" />
      <LineId Id="81" Count="2" />
      <LineId Id="90" Count="0" />
      <LineId Id="89" Count="0" />
      <LineId Id="80" Count="0" />
      <LineId Id="205" Count="0" />
      <LineId Id="149" Count="0" />
      <LineId Id="148" Count="0" />
      <LineId Id="150" Count="1" />
      <LineId Id="199" Count="3" />
      <LineId Id="198" Count="0" />
      <LineId Id="204" Count="0" />
      <LineId Id="94" Count="0" />
      <LineId Id="96" Count="0" />
      <LineId Id="166" Count="0" />
      <LineId Id="169" Count="3" />
      <LineId Id="175" Count="0" />
      <LineId Id="167" Count="0" />
      <LineId Id="173" Count="1" />
      <LineId Id="176" Count="0" />
      <LineId Id="168" Count="0" />
      <LineId Id="98" Count="0" />
      <LineId Id="207" Count="0" />
      <LineId Id="206" Count="0" />
      <LineId Id="208" Count="0" />
      <LineId Id="219" Count="0" />
      <LineId Id="228" Count="0" />
      <LineId Id="230" Count="0" />
      <LineId Id="229" Count="0" />
      <LineId Id="248" Count="1" />
      <LineId Id="209" Count="0" />
      <LineId Id="222" Count="0" />
      <LineId Id="210" Count="0" />
      <LineId Id="214" Count="0" />
      <LineId Id="211" Count="0" />
      <LineId Id="224" Count="0" />
      <LineId Id="234" Count="0" />
      <LineId Id="231" Count="1" />
      <LineId Id="250" Count="1" />
      <LineId Id="233" Count="0" />
      <LineId Id="223" Count="0" />
      <LineId Id="213" Count="0" />
      <LineId Id="216" Count="2" />
      <LineId Id="215" Count="0" />
      <LineId Id="240" Count="0" />
      <LineId Id="239" Count="0" />
      <LineId Id="241" Count="0" />
      <LineId Id="243" Count="0" />
      <LineId Id="242" Count="0" />
      <LineId Id="270" Count="0" />
      <LineId Id="259" Count="0" />
      <LineId Id="258" Count="0" />
      <LineId Id="260" Count="0" />
      <LineId Id="265" Count="0" />
      <LineId Id="276" Count="1" />
      <LineId Id="284" Count="0" />
      <LineId Id="278" Count="0" />
      <LineId Id="281" Count="0" />
      <LineId Id="285" Count="0" />
      <LineId Id="279" Count="0" />
      <LineId Id="282" Count="1" />
      <LineId Id="286" Count="1" />
      <LineId Id="289" Count="1" />
      <LineId Id="288" Count="0" />
      <LineId Id="275" Count="0" />
      <LineId Id="267" Count="0" />
      <LineId Id="262" Count="0" />
      <LineId Id="264" Count="0" />
      <LineId Id="263" Count="0" />
    </LineIds>
    <LineIds Name="FB_Machine.Operating_ManualMove">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Machine.Operating_Reset">
      <LineId Id="5" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="11" Count="1" />
      <LineId Id="10" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="29" Count="3" />
      <LineId Id="110" Count="1" />
      <LineId Id="41" Count="0" />
      <LineId Id="100" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="112" Count="0" />
      <LineId Id="87" Count="12" />
      <LineId Id="86" Count="0" />
      <LineId Id="102" Count="0" />
      <LineId Id="105" Count="0" />
      <LineId Id="85" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="21" Count="0" />
    </LineIds>
    <LineIds Name="FB_Machine.Operating_Run">
      <LineId Id="14" Count="0" />
      <LineId Id="120" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="121" Count="1" />
      <LineId Id="124" Count="0" />
      <LineId Id="123" Count="0" />
      <LineId Id="141" Count="2" />
      <LineId Id="140" Count="0" />
      <LineId Id="151" Count="1" />
      <LineId Id="157" Count="2" />
      <LineId Id="153" Count="1" />
      <LineId Id="90" Count="0" />
      <LineId Id="89" Count="0" />
      <LineId Id="91" Count="0" />
      <LineId Id="79" Count="0" />
      <LineId Id="78" Count="0" />
      <LineId Id="80" Count="0" />
      <LineId Id="82" Count="1" />
      <LineId Id="81" Count="0" />
      <LineId Id="168" Count="0" />
      <LineId Id="167" Count="0" />
      <LineId Id="169" Count="0" />
      <LineId Id="173" Count="0" />
      <LineId Id="170" Count="0" />
      <LineId Id="172" Count="0" />
      <LineId Id="171" Count="0" />
      <LineId Id="165" Count="0" />
    </LineIds>
    <LineIds Name="FB_Machine.Operating_ToolChangeInit">
      <LineId Id="39" Count="0" />
      <LineId Id="34" Count="1" />
      <LineId Id="24" Count="6" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Machine.Operating_ToolChangeRun">
      <LineId Id="120" Count="0" />
      <LineId Id="110" Count="1" />
      <LineId Id="145" Count="0" />
      <LineId Id="144" Count="0" />
      <LineId Id="143" Count="0" />
      <LineId Id="129" Count="0" />
      <LineId Id="112" Count="6" />
      <LineId Id="108" Count="0" />
      <LineId Id="130" Count="0" />
      <LineId Id="107" Count="0" />
      <LineId Id="134" Count="4" />
      <LineId Id="75" Count="0" />
      <LineId Id="81" Count="1" />
      <LineId Id="139" Count="0" />
      <LineId Id="142" Count="0" />
      <LineId Id="83" Count="0" />
      <LineId Id="131" Count="0" />
      <LineId Id="85" Count="2" />
      <LineId Id="90" Count="1" />
      <LineId Id="133" Count="0" />
      <LineId Id="92" Count="1" />
      <LineId Id="132" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="123" Count="4" />
      <LineId Id="122" Count="0" />
      <LineId Id="141" Count="0" />
      <LineId Id="140" Count="0" />
      <LineId Id="59" Count="0" />
    </LineIds>
    <LineIds Name="FB_Machine.Popup_Error">
      <LineId Id="5" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="13" Count="0" />
    </LineIds>
    <LineIds Name="FB_Machine.Run_Error">
      <LineId Id="11" Count="1" />
      <LineId Id="10" Count="0" />
      <LineId Id="20" Count="1" />
      <LineId Id="23" Count="1" />
      <LineId Id="92" Count="1" />
      <LineId Id="22" Count="0" />
      <LineId Id="134" Count="2" />
      <LineId Id="138" Count="1" />
      <LineId Id="137" Count="0" />
      <LineId Id="67" Count="0" />
      <LineId Id="69" Count="3" />
      <LineId Id="95" Count="1" />
      <LineId Id="68" Count="0" />
      <LineId Id="94" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="27" Count="3" />
      <LineId Id="97" Count="1" />
      <LineId Id="26" Count="0" />
      <LineId Id="75" Count="3" />
      <LineId Id="99" Count="2" />
      <LineId Id="79" Count="0" />
      <LineId Id="55" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="122" Count="1" />
      <LineId Id="126" Count="1" />
      <LineId Id="124" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="36" Count="1" />
      <LineId Id="34" Count="0" />
      <LineId Id="90" Count="1" />
      <LineId Id="35" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="86" Count="0" />
      <LineId Id="102" Count="0" />
      <LineId Id="39" Count="3" />
      <LineId Id="52" Count="1" />
      <LineId Id="89" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="47" Count="1" />
      <LineId Id="45" Count="0" />
      <LineId Id="87" Count="1" />
      <LineId Id="46" Count="0" />
      <LineId Id="58" Count="1" />
      <LineId Id="109" Count="0" />
      <LineId Id="112" Count="2" />
      <LineId Id="111" Count="0" />
    </LineIds>
    <LineIds Name="FB_Machine.State_Machine">
      <LineId Id="5" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="11" Count="12" />
      <LineId Id="28" Count="2" />
      <LineId Id="35" Count="2" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="FB_Machine.Update_Program_String">
      <LineId Id="21" Count="7" />
      <LineId Id="5" Count="0" />
      <LineId Id="29" Count="1" />
      <LineId Id="33" Count="0" />
      <LineId Id="37" Count="1" />
      <LineId Id="34" Count="0" />
      <LineId Id="40" Count="4" />
      <LineId Id="39" Count="0" />
      <LineId Id="46" Count="4" />
      <LineId Id="45" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="61" Count="1" />
      <LineId Id="60" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="35" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>