<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_Machine" Id="{3f2b54bd-7836-4066-a761-fd73c9f3b9ef}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Machine //Control program
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	robotPose 		: Structure_RobotPose;
	// =============== Machine Modules ================================================
	fbRobot					: FB_Robot;					// Robot object
	fbSpindle				: FB_Spindle;				// Spindle Object. Includes spindle speed, tool changing control
	fbGantry				: FB_GantryHoldDown;		// Gantry hold down object. Includes servo control, pneumatic clamping control, robot following
	fbEnclosure				: FB_Enclosure;				// Enclosure control. Includes table clamping, dust collection monitoring, door control
	
	
	//Safety
	Run AT %Q* : BOOL := TRUE;
	ErrorAcknowledge AT %Q* : BOOL;
	errorReset AT %Q* : BOOL;
	safetyPLCError AT %I* : BOOL;
	safetyPLCEStopOut AT %I* : BOOL;
	safetyPLCComErr AT %I* : BOOL;
	safetyPLCEStopBlockRun AT %I* : BOOL;
	safetyPLCFBErr AT %I* : BOOL;
	safetyPLCOtherErr AT %I* : BOOL;
	
	// ============== Errors ==========================================================
	pneumaticsOK	: BOOL;								// True if cylinders in assigned position and pressure ok.
	bErrors			: BOOL;								// True if modules have errors or E stop.	
	sHMILastErrorMessage : STRING(300);							
	
	// =============== State machine ================================================
	eSystemState			: E_MachineState := E_MachineState.INITIALIZATION;  // Current state 
	resetSuccessful			: BOOL;
	
	// =============== HMI buttons and states ========================================
	//Universal buttons
	bHMIReset				: BOOL;	// Button to reset program. TODO: make
	rTrigResetErrors		: R_TRIG;
	sHMIErrorDisplay		: STRING(300);

	// initialize.content buttons
	bHMIHomeRobot			: BOOL; //
	rTrigHomeRobot			: R_TRIG; //
	bHMIHomeMotors			: BOOL; //
	rTrigHomeMotors			: R_TRIG; //
	bHMICloseDoor			: BOOL; //
	rTrigCloseDoor			: R_TRIG; //
	fTrigOpenDoor			: F_TRIG; //
	bHMILockTables			: BOOL; //
	rTrigLockTables			: R_TRIG; //
	fTrigUnlockTables		: F_TRIG; //
	bHMILowerRaiseRollers	: BOOL; //
	rTrigRaiseRollers		: R_TRIG; //
	fTrigLowerRollers		: F_TRIG; //
	bHMIWarmupSpindle		: BOOL; //
	rTrigWarmupSpindle		: R_TRIG; //
	fTrigStopSpindle		: F_TRIG; //
	bHMIChangeTool			: BOOL;
	rTrigChangeTool			: R_TRIG;
	fTrigStopChangeTool		: F_TRIG;
	
	fTrigInProgramRunning 		: F_TRIG; //Trigger for when robot finishes program
//	isCalledHomeMotors	: BOOL := FALSE;
	
	// initialize.content indicators
	sHMIMotorsHomed			: BOOL; //Todo: Change colour/text when activated
	sHMIDoorClosed			: BOOL; //Todo: Change colour/text when activated
	sHMITablesLocked		: BOOL; //Todo: Change colour/text when activated
	sHMIRollersRaised		: BOOL; //Todo: Change colour/text when activated
	sDustCollectionOn		: BOOL;
	sHMICurrentTool			: INT;
	sHMIRequestedTool		: INT;
	
	// selectProgram.content inputs
	programWallChoice	: USINT; // 1 for front wall, 2 for back wall, 3-16 for additional options
	programOption1		: BOOL; //Front wall: True: E cut, False, no e cut Back wall: True: STDWindow, False, no window
	programOption2		: BOOL; //Front wall: True: glass door, False, wood door Back wall: True: Chimney cut, False, no chimney cut
	programOption3		: BOOL; //Front wall: True: Door lock, false, no lock Back wall: NA
	bHMIRunProgramScreen		: BOOL; 
	rTrigRunProgramScreen		: R_TRIG; //
	//=============Programs====================
	selectedProgram : Program_Type;
	
	// run.content buttons
	bHMIStart				: BOOL; // Button to start program. Called from Run.content
	rTrigStartProgram		: R_TRIG; //
	fTrigStopProgram		: F_TRIG; //
	bHMIHold				: BOOL; // Button to hold program. Called from Run.content
	rTrigHoldRobot			: R_TRIG; //
	fTrigRunRobot			: F_TRIG; //
	bHMILoadTool			: BOOL; // Button to activate tool load pushbutton. Called from Run.content
	rTrigLoadTool			: R_TRIG; //
	bHMIToolLoaded			: BOOL; // Button to confirm tool is loaded. Called from Run.content
	rTrigToolLoaded			: R_TRIG; //
	bActivateRollers		: BOOL; // Button to make rollers follow robot. Called from Run.content
//	rTrigActivateRollers	: R_TRIG; //
//	fTrigDeActivateRollers	: F_TRIG;
	bHMIManual				: BOOL; // Button to switch state into manual mode. TODO: make
	
	// run.content indicators
	sHMIPneumaticsOK		: BOOL; // Indicator light of pneumatic pressure, called from run.content
	sHMIRobotHomed			: BOOL; // Indicator light of robot homed, called from run.content. Todo: Change colour/text when activated
	sHMIRollersActivated	: BOOL; // Indicator light of rollers activated, called from run.content
	sHMIeStopsOff			: BOOL; // Indicator light of e stops off, called from run.content
	sHMIDustCollectionOn AT %I*	: BOOL;
	sProgramString			: STRING;
	sHMIDisplayMessage		: STRING; //Run display
	sHMIIsError				: BOOL; //
	
	// Error states
	eInitializeServos : Structure_Error;
	powerUp				: BOOL := TRUE;
	overrideErrors		: BOOL := FALSE; //FOR  DEBUGGING PURPOSES ONLY
	disableSpindle		: BOOL := FALSE; //FOR DEBUGGING PURPOSES ONLY

//	startUp: BOOL; // for operating run, first actions upon starting program
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Call of actions

	// Init
	overrideErrors := FALSE;
	disableSpindle := FALSE;
	//HMI update
	// Update each HMI indicator
	sHMIRobotHomed := fbRobot.inRobotAtHome;
	sHMIRollersActivated := bActivateRollers AND GVL_Axes.AxisWest.Status.Homed;
	sDustCollectionOn := fbEnclosure.dustCollectionOn;
	sHMIeStopsOff := NOT fbRobot.inRobotError;
	
	// Mode and state requests
	Change_State();  // Changes state based on inputs
	State_Machine(); // Calls functions based on state
	
	// Update robot IOs
	fbRobot();
	robotPose := fbRobot.Update_Pose();
	fbGantry();
	fbEnclosure();
	fbSpindle();
	
	//Safety
//	IF NOT safetyEStop OR errorSafety THEN
//		ErrorAcknowledge := TRUE;
//	END_IF
	ErrorAcknowledge := safetyPLCError OR safetyPLCEStopOut OR safetyPLCComErr OR safetyPLCFBErr OR safetyPLCOtherErr;

	// Output variables
	
	// HMI button triggers
	rTrigHomeRobot(CLK := bHMIHomeRobot);
	rTrigHomeMotors(CLK := bHMIHomeMotors);
	rTrigCloseDoor(CLK := bHMICloseDoor);
	rTrigLockTables(CLK := bHMILockTables);
	rTrigRaiseRollers(CLK := bHMILowerRaiseRollers);
	rTrigWarmupSpindle(CLK := bHMIWarmupSpindle);
	rTrigRunProgramScreen(CLK := bHMIRunProgramScreen);
	rTrigStartProgram(CLK := bHMIStart);
	rTrigHoldRobot(CLK := bHMIHold);
	rTrigLoadTool(CLK := bHMILoadTool);
	rTrigToolLoaded(CLK := bHMIToolLoaded);
	rTrigResetErrors(CLK := bHMIReset);
	rTrigChangeTool(CLK := bHMIChangeTool);
	
	fTrigOpenDoor(CLK := bHMICloseDoor);
	fTrigUnlockTables(CLK := bHMILockTables);
	fTrigLowerRollers(CLK := bHMILowerRaiseRollers);
	fTrigStopSpindle(CLK := bHMIWarmupSpindle);
	fTrigInProgramRunning(CLK := fbRobot.inRobotProgramRunning);
	fTrigStopProgram(CLK := bHMIStart);
	fTrigRunRobot(CLK := bHMIHold);
	fTrigStopChangeTool(CLK := bHMIChangeTool);]]></ST>
    </Implementation>
    <Folder Name="StateMachine" Id="{b4b3eed7-4e15-4350-a74a-294b50706019}" />
    <Method Name="Change_State" Id="{11427209-76ae-4b9c-9f30-0498e05b4968}" FolderPath="StateMachine\">
      <Declaration><![CDATA[METHOD Change_State
VAR_INPUT
END_VAR
VAR
	errorState : Structure_Error;
	temp: BOOL;
END_VAR


]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Initialize -> Run
errorState := Run_Error();
IF overrideErrors = TRUE THEN
	errorState.isError := FALSE;
END_IF

IF errorState.isError THEN
	IF errorState.errorType.2 = 1 OR (eSystemState <> E_MachineState.INITIALIZATION AND eSystemState <> E_MachineState.ERROR AND eSystemState <> E_MachineState.RESET) THEN //If E stop is pressed, stop functionality always. Else, only when running
		eSystemState := E_MachineState.ERROR;
		sHMILastErrorMessage := errorState.errorMessage;
		fbSpindle.Dust_Hood(x_pose := 0, enable := FALSE);
		eSystemState := E_MachineState.ERROR; 
	END_IF
END_IF

CASE eSystemState OF
	E_MachineState.ERROR:
		IF rTrigResetErrors.Q THEN
			eSystemState := E_MachineState.RESET;
		END_IF
	E_MachineState.INITIALIZATION:
		IF rTrigStartProgram.Q AND NOT errorState.isError THEN
			eSystemState := E_MachineState.RUN;
		END_IF
		
		IF rTrigChangeTool.Q THEN
			eSystemState := E_MachineState.TOOLCHANGEINIT;
			fbRobot.Update_Tool(current := INT_TO_USINT(sHMICurrentTool), request := INT_TO_USINT(sHMIRequestedTool));
			fbSpindle.Update_Current_Tool(toolNumber := sHMICurrentTool);
			fbRobot.Program_Select(programChoice := 10, option1 := FALSE, option2 := FALSE, option3 := FALSE);
			fbRobot.Start_Robot();
		END_IF
	
//	E_MachineState.MANUALMOVE: TODO: Implement
//		
		
	E_MachineState.RUN:
		IF (fTrigStopProgram.Q OR fTrigInProgramRunning.Q) AND NOT errorState.isError THEN
			eSystemState := E_MachineState.INITIALIZATION;
			fbSpindle.Dust_Hood(x_pose := 0, enable := FALSE);
			fbSpindle.Stop_Spindle();
			fbRobot.Stop_Robot_Program();
			fbGantry.Lower_Raise_Rollers(raiseRollers := TRUE);
			bHMIStart := FALSE;
		END_IF
		
		IF fbRobot.inRobotToolNumberRequest <> fbSpindle.currentTool.toolNumber THEN
			fbSpindle.Stop_Spindle();
			eSystemState := E_MachineState.TOOLCHANGERUN;
			fbSpindle.Dust_Hood(x_pose := 0, enable := FALSE);
		END_IF
		
	E_MachineState.RESET:
		IF resetSuccessful THEN
			eSystemState := E_MachineState.INITIALIZATION;
			bActivateRollers := FALSE;
			resetSuccessful := FALSE;
			sHMILastErrorMessage := '';
		END_IF
		
	E_MachineState.TOOLCHANGERUN:
		IF fbRobot.inRobotToolNumberRequest = fbRobot.inRobotToolNumberCurrent THEN
			fbSpindle.Update_Current_Tool(toolNumber := fbRobot.inRobotToolNumberCurrent);
			fbRobot.RunHold_Robot(RunHold := FALSE);
			sHMIDisplayMessage := CONCAT(CONCAT('Press load tool if ', fbSpindle.currentTool.name), ' is loaded');
			IF rTrigToolLoaded.Q THEN
				fbSpindle.Start_Spindle(spindleSpeed := fbSpindle.currentTool.speed);
				eSystemState := E_MachineState.RUN;
			END_IF
		END_IF
		
		IF fTrigStopProgram.Q THEN
			eSystemState := E_MachineState.INITIALIZATION;
			fbSpindle.Dust_Hood(x_pose := 0, enable := FALSE);
			fbSpindle.Stop_Spindle();
			bHMIStart := FALSE;
		END_IF
		
	E_MachineState.TOOLCHANGEINIT:
		IF fTrigInProgramRunning.Q THEN
			fbSpindle.Update_Current_Tool(toolNumber := fbRobot.inRobotToolNumberCurrent);
			eSystemState := E_MachineState.INITIALIZATION;
			bHMIChangeTool := FALSE;
			fbRobot.Update_Tool(current := fbRobot.inRobotToolNumberCurrent, request := fbRobot.inRobotToolNumberCurrent);
		END_IF
		
		IF fTrigStopChangeTool.Q THEN
			fbRobot.Stop_Robot_Program();
			eSystemState := E_MachineState.INITIALIZATION;
		END_IF
END_CASE

]]></ST>
      </Implementation>
    </Method>
    <Method Name="Operating_Error" Id="{34eb4b26-0b5c-454b-a500-c33be7205698}" FolderPath="StateMachine\">
      <Declaration><![CDATA[METHOD Operating_Error
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Turn off spindle
fbSpindle.Stop_Spindle();
//Stop robot
fbRobot.ForceStop_Robot();
//Stop Servos
fbGantry.Stop_Servos();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Operating_Hold" Id="{d9f86694-1d0b-4add-8c20-fb8a5acf1092}" FolderPath="StateMachine\">
      <Declaration><![CDATA[METHOD Operating_Hold
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="Operating_Initialization" Id="{a0909845-20b7-4f19-88c6-a128d86fcc8b}" FolderPath="StateMachine\">
      <Declaration><![CDATA[METHOD Operating_Initialization
VAR_INPUT
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbEnclosure.Table_Clamp_Control_Pushbutton();

IF NOT fbSpindle.spindleWarmupOn THEN
	fbSpindle.Stop_Spindle();
END_IF

fbRobot.Robot_Coords_Match_Tool(current_Tool := fbSpindle.currentTool);

IF powerUp THEN
	fbRobot.Init_Robot();
	powerUp := FALSE;
END_IF

//Pushbuttons
IF rTrigHomeRobot.Q THEN
	fbRobot.Home_Robot(); //Done, tested
END_IF

IF rTrigHomeMotors.Q THEN
	fbGantry.Lower_Raise_Rollers(raiseRollers := TRUE); //Done, tested
	eInitializeServos := fbGantry.Home_Servos(robotPose := fbRobot.robotPose); //Done, tested
END_IF

//Toggle buttons
IF rTrigCloseDoor.Q THEN
	fbEnclosure.Rolling_Door_HMI_Operation(); //Done, tested no door
END_IF

IF fTrigOpenDoor.Q THEN
	fbEnclosure.Rolling_Door_HMI_Operation(); //Done, tested no door
END_IF

IF rTrigLockTables.Q THEN
	fbEnclosure.Table_Clamp_Control_HMI(eastTableLock := TRUE, westTableLock := TRUE); //Done, tested
END_IF

IF fTrigUnlockTables.Q THEN
	fbEnclosure.Table_Clamp_Control_HMI(eastTableLock := FALSE, westTableLock := FALSE); //Done, tested
END_IF

IF rTrigRaiseRollers.Q THEN
	fbGantry.Lower_Raise_Rollers(raiseRollers := TRUE); //Done, tested
END_IF

IF fTrigLowerRollers.Q THEN
	fbGantry.Lower_Raise_Rollers(raiseRollers := FALSE); //Done, tested
END_IF

IF rTrigWarmupSpindle.Q THEN
	fbSpindle.Spindle_Warmup(); //Done, tested. TODO: Change spindle is warm flag if spindle hasn't been on for >3 hours, make sure sawblade isn't present
END_IF

IF fbSpindle.spindleIsWarm THEN
	bHMIWarmupSpindle := FALSE;
END_IF

IF fTrigStopSpindle.Q THEN
	fbSpindle.Stop_Spindle(); //Done, tested
END_IF

IF rTrigRunProgramScreen.Q THEN
	fbRobot.Program_Select(programChoice := programWallChoice, option1 := programOption1, option2 := programOption2, option3 := programOption3);
	Update_Program_String();
	fbSpindle.Update_Current_Tool(toolNumber := selectedProgram.firstTool.toolNumber);
//	fbRobot.Update_Current_
	bHMIRunProgramScreen := FALSE;
END_IF

//Manual tool change enabled if spindle is stopped
IF fbSpindle.spindleIsStopped THEN
	fbSpindle.Manual_Tool_Change(changeToolEnable := TRUE);
END_IF

IF bActivateRollers AND GVL_Axes.AxisWest.Status.Homed THEN
	IF fbRobot.inRobotPoseDataIsSent THEN
		fbGantry.Follow_Robot(robotPoseGantry := robotPose);
	ELSE
		sHMIErrorDisplay := 'Robot not sending posedata';
	END_IF
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Operating_ManualMove" Id="{e062f620-36f2-4ef0-9468-9f06db1c52fd}" FolderPath="StateMachine\">
      <Declaration><![CDATA[METHOD Operating_ManualMove
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="Operating_Reset" Id="{409ce780-c7de-4e8c-a0bb-25edc8e53879}" FolderPath="StateMachine\">
      <Declaration><![CDATA[METHOD Operating_Reset
VAR_INPUT
END_VAR
VAR
	robotReset	: BOOL;
	gantryReset : BOOL;
	spindleReset : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Robot reset
robotReset := fbRobot.Reset_Robot();
//Servo Reset
gantryReset := fbGantry.Reset_Servos();
//VFD Reset
spindleReset := fbSpindle.Reset_Drive();
//Safety Reset
IF NOT safetyPLCEStopOut THEN
	errorReset := NOT errorReset;
END_IF

IF robotReset AND gantryReset AND spindleReset AND safetyPLCEStopOut THEN
	resetSuccessful := TRUE;
	errorReset := FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Operating_Run" Id="{39f52282-3ce5-4d02-b41e-113893603b81}" FolderPath="StateMachine\">
      <Declaration><![CDATA[METHOD Operating_Run
VAR
	robotRun : BOOL;
	toolNumber: INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//On start program, start robot program and turn on spindle
IF rTrigStartProgram.Q THEN
	fbRobot.Program_Select(programChoice := programWallChoice, option1 := programOption1, option2 := programOption2, option3 := programOption3);
	IF NOT disableSpindle THEN
		fbSpindle.Start_Spindle(spindleSpeed := fbSpindle.currentTool.speed);
	END_IF
	fbRobot.Start_Robot();
END_IF

// Follow robot
IF fbRobot.inRobotPoseDataIsSent AND NOT fbSpindle.spindleIsStopped THEN
	robotRun := fbGantry.Follow_Robot(robotPoseGantry := fbRobot.robotPose);
ELSE 
	robotRun := FALSE;
	sHMIErrorDisplay := CONCAT(sHMIErrorDisplay, '/n Robot pose data not being sent or spindle is stopped'); //This is called after Run_Error so all good, but not clean. TODO: make better
END_IF

IF fbSpindle.spindleIsStopped THEN
	fbSpindle.Start_Spindle(spindleSpeed := fbSpindle.currentTool.speed);
END_IF
fbGantry.Cylinder_Set_Cutting();

IF NOT fbRobot.Robot_Coords_Match_Tool(current_Tool := fbSpindle.currentTool) THEN
	sHMIErrorDisplay := CONCAT(sHMIErrorDisplay, '/n Robot tool value different'); //TODO: Stop program, let user change tool
	fbRobot.RunHold_Robot(RunHold := FALSE);
END_IF

//dust boot
fbSpindle.Dust_Hood(x_pose := fbRobot.robotPose.xPose, enable := TRUE);

IF bHMIHold THEN
	fbRobot.RunHold_Robot(RunHold := FALSE);
ELSE
	fbRobot.RunHold_Robot(RunHold := robotRun);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Operating_ToolChangeInit" Id="{a53a4ada-9fc9-4809-accd-3119d32560e7}" FolderPath="StateMachine\">
      <Declaration><![CDATA[METHOD Operating_ToolChangeInit : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Tool change auto
IF fbRobot.inRobotReleaseTool THEN
	fbSpindle.Release_Tool();
	fbRobot.Release_Update(release := fbSpindle.spindleToolOpen);
ELSE
	fbSpindle.Grab_Tool();
	fbRobot.Release_Update(release := NOT fbSpindle.spindleToolLocked);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Operating_ToolChangeRun" Id="{547d6147-7362-437f-81c7-269a347643cf}" FolderPath="StateMachine\">
      <Declaration><![CDATA[METHOD Operating_ToolChangeRun : BOOL
VAR_INPUT
END_VAR
VAR
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbSpindle.Stop_Spindle();
IF fbRobot.outRobotToolChangeAuto THEN
	//Tool change auto
	IF fbRobot.inRobotReleaseTool THEN
		fbSpindle.Release_Tool();
		fbRobot.Release_Update(release := fbSpindle.spindleToolOpen);
	ELSE
		fbSpindle.Grab_Tool();
		fbRobot.Release_Update(release := NOT fbSpindle.spindleToolLocked);
	END_IF
ELSE
	//Tool change manual
	IF fbSpindle.spindleIsStopped AND fbRobot.inRobotReleaseTool THEN
		fbSpindle.Manual_Tool_Change(changeToolEnable := TRUE);
	END_IF
	IF bHMIToolLoaded THEN
		fbSpindle.Update_Current_Tool(toolNumber := fbRobot.inRobotToolNumberRequest);
		fbSpindle.Start_Spindle(spindleSpeed := fbSpindle.currentTool.speed);
	END_IF
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Run_Error" Id="{2631638b-9fb7-4314-b8bc-31ebf56164cd}">
      <Declaration><![CDATA[METHOD Run_Error : Structure_Error
VAR_INPUT
END_VAR
VAR
	//0: robot, 1: servos, 2: E-stops, 3: Door, 4: Pneumatics, 5: Spindle, 6: Tool changing
	pneumaticsError : Structure_Error;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Run_Error.errorMessage := '';
Run_Error.isError := FALSE;
//Robot Error
IF fbRobot.inRobotError THEN
	Run_Error.errorMessage := CONCAT(Run_Error.errorMessage,'\nRobot error, check teach pendant');
	Run_Error.isError := TRUE;
	Run_Error.errorType.0 := TRUE;
ELSE
	Run_Error.errorType.0 := TRUE;
END_IF

IF fbRobot.inRobotEStopOn THEN
	Run_Error.errorMessage := CONCAT(Run_Error.errorMessage, '\nRobot E Stop On');
	Run_Error.isError := TRUE;
	Run_Error.errorType.2 := TRUE;
ELSE
	Run_Error.errorType.2 := FALSE;
END_IF


//Servos error
IF GVL_Axes.AxisWest.Status.Error THEN
	Run_Error.errorMessage := CONCAT(Run_Error.errorMessage, CONCAT('\nwest gantry error: ', UDINT_TO_STRING(GVL_Axes.AxisWest.Status.ErrorID)));
	Run_Error.isError := TRUE;
	Run_Error.errorType.1 := TRUE;
ELSE
	Run_Error.errorType.1 := FALSE;
END_IF

IF GVL_Axes.AxisEast.Status.Error THEN
	Run_Error.errorMessage := CONCAT(Run_Error.errorMessage, CONCAT('\neast gantry error: ', UDINT_TO_STRING(GVL_Axes.AxisWest.Status.ErrorID)));
	Run_Error.isError := TRUE;
	Run_Error.errorType.1 := TRUE;
ELSE
	Run_Error.errorType.1 := FALSE;
END_IF

//Torque sensor error Todo: implement

//E-stop/safety system error Todo: 
IF NOT safetyPLCEStopOut THEN
	Run_Error.isError := TRUE;
	Run_Error.errorType.2 := TRUE;
	Run_Error.errorMessage := CONCAT(Run_Error.errorMessage, '\nSafety PLC in Error');
END_IF

//Door error
IF fbEnclosure.doorIsOpen THEN
	Run_Error.errorMessage := CONCAT(Run_Error.errorMessage,'\nDoorIsOpen');
	Run_Error.isError := TRUE;
	Run_Error.errorType.3 := TRUE;
ELSE
	Run_Error.errorType.3 := FALSE;
END_IF

//Pneumatics error
pneumaticsError := fbGantry.Pneumatics_Error();

IF pneumaticsError.isError THEN
	Run_Error.errorMessage := CONCAT(Run_Error.errorMessage, pneumaticsError.errorMessage);
	Run_Error.isError := TRUE;
	Run_Error.errorType.4 := TRUE;
	sHMIPneumaticsOK := FALSE;
ELSE
	Run_Error.errorType.4 := FALSE;
	sHMIPneumaticsOK := TRUE;
END_IF

//Spindle error
IF fbSpindle.spindleError THEN
	Run_Error.errorMessage := CONCAT(Run_Error.errorMessage, '\nSpindleError');
	Run_Error.isError := TRUE;
	Run_Error.errorType.5 := TRUE;
ELSE 
	Run_Error.errorType.5 := FALSE;
END_IF

sHMIIsError := Run_Error.isError;
IF Run_Error.errorMessage = '' THEN
	sHMIErrorDisplay := 'No Errors';
ELSE
	sHMIErrorDisplay := MID(Run_Error.errorMessage, LEN(Run_Error.errorMessage) - 1, 3);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="State_Machine" Id="{f466ced8-b935-49bf-a90d-d8b2d5bdc64e}" FolderPath="StateMachine\">
      <Declaration><![CDATA[// Calls functions based on state
METHOD State_Machine 
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE eSystemState OF
	E_MachineState.INITIALIZATION:
		Operating_Initialization();
	
//	E_MachineState.MANUALMOVE:
//		Operating_ManualMove(); //TODO: Implement
		
	E_MachineState.RUN:
		Operating_Run();
		
	E_MachineState.RESET:
		Operating_Reset();
		
	E_MachineState.ERROR:
		Operating_Error();
		
	E_MachineState.TOOLCHANGERUN:
		Operating_ToolChangeRun();
		
	E_MachineState.TOOLCHANGEINIT:
		Operating_ToolChangeInit();
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="Update_Program_String" Id="{65642f34-04a0-419f-b222-9cff5bf3d802}">
      <Declaration><![CDATA[METHOD Update_Program_String
VAR
	option1string			: STRING;
	option2string			: STRING;
	option3string			: STRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE programWallChoice OF
        1: selectedProgram := GVL_Programs.FrontWall;
        2: selectedProgram := GVL_Programs.BackWall;
        3: selectedProgram := GVL_Programs.Option3;
        4: selectedProgram := GVL_Programs.Option4;
        // Add more cases for additional options if needed
        ELSE
            // Handle invalid program wall choice
    END_CASE;

IF programOption1 THEN
	option1string := selectedProgram.option1true;
ELSE
	option1string := selectedProgram.option1false;
END_IF

IF programOption2 THEN
	option2string := selectedProgram.option2true;
ELSE
	option2string := selectedProgram.option2false;
END_IF

IF programOption3 THEN
	option3string := selectedProgram.option3true;
ELSE
	option3string := selectedProgram.option3false;
END_IF

sProgramString := CONCAT(CONCAT(CONCAT(CONCAT(CONCAT(CONCAT(selectedProgram.programName,' - '), option1string),' - '),option2string),' - '), option3string);]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_Machine">
      <LineId Id="108" Count="1" />
      <LineId Id="602" Count="1" />
      <LineId Id="1017" Count="0" />
      <LineId Id="605" Count="5" />
      <LineId Id="152" Count="0" />
      <LineId Id="113" Count="0" />
      <LineId Id="370" Count="0" />
      <LineId Id="115" Count="0" />
      <LineId Id="188" Count="1" />
      <LineId Id="150" Count="0" />
      <LineId Id="572" Count="0" />
      <LineId Id="464" Count="1" />
      <LineId Id="463" Count="0" />
      <LineId Id="1130" Count="2" />
      <LineId Id="1134" Count="1" />
      <LineId Id="1255" Count="0" />
      <LineId Id="1264" Count="0" />
      <LineId Id="122" Count="0" />
      <LineId Id="124" Count="0" />
      <LineId Id="346" Count="5" />
      <LineId Id="127" Count="0" />
      <LineId Id="468" Count="0" />
      <LineId Id="585" Count="2" />
      <LineId Id="590" Count="0" />
      <LineId Id="706" Count="0" />
      <LineId Id="807" Count="0" />
      <LineId Id="589" Count="0" />
      <LineId Id="356" Count="2" />
      <LineId Id="353" Count="0" />
      <LineId Id="561" Count="0" />
      <LineId Id="594" Count="1" />
      <LineId Id="911" Count="0" />
    </LineIds>
    <LineIds Name="FB_Machine.Change_State">
      <LineId Id="5" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="227" Count="3" />
      <LineId Id="165" Count="0" />
      <LineId Id="190" Count="0" />
      <LineId Id="166" Count="0" />
      <LineId Id="253" Count="0" />
      <LineId Id="167" Count="1" />
      <LineId Id="191" Count="0" />
      <LineId Id="163" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="241" Count="2" />
      <LineId Id="240" Count="0" />
      <LineId Id="11" Count="1" />
      <LineId Id="25" Count="1" />
      <LineId Id="123" Count="2" />
      <LineId Id="127" Count="0" />
      <LineId Id="130" Count="0" />
      <LineId Id="128" Count="1" />
      <LineId Id="126" Count="0" />
      <LineId Id="13" Count="5" />
      <LineId Id="27" Count="0" />
      <LineId Id="101" Count="0" />
      <LineId Id="66" Count="0" />
      <LineId Id="193" Count="0" />
      <LineId Id="255" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="76" Count="0" />
      <LineId Id="78" Count="0" />
      <LineId Id="91" Count="0" />
      <LineId Id="79" Count="0" />
      <LineId Id="103" Count="0" />
      <LineId Id="80" Count="0" />
      <LineId Id="43" Count="1" />
      <LineId Id="39" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="180" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="254" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="83" Count="0" />
      <LineId Id="82" Count="0" />
      <LineId Id="86" Count="0" />
      <LineId Id="132" Count="0" />
      <LineId Id="87" Count="1" />
      <LineId Id="90" Count="0" />
      <LineId Id="84" Count="0" />
      <LineId Id="89" Count="0" />
      <LineId Id="85" Count="0" />
      <LineId Id="157" Count="0" />
      <LineId Id="142" Count="0" />
      <LineId Id="145" Count="2" />
      <LineId Id="143" Count="1" />
      <LineId Id="122" Count="0" />
      <LineId Id="114" Count="2" />
      <LineId Id="121" Count="0" />
      <LineId Id="217" Count="0" />
      <LineId Id="131" Count="0" />
      <LineId Id="113" Count="0" />
      <LineId Id="203" Count="2" />
      <LineId Id="207" Count="0" />
      <LineId Id="206" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="170" Count="0" />
      <LineId Id="169" Count="0" />
    </LineIds>
    <LineIds Name="FB_Machine.Operating_Error">
      <LineId Id="5" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="14" Count="0" />
    </LineIds>
    <LineIds Name="FB_Machine.Operating_Hold">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Machine.Operating_Initialization">
      <LineId Id="91" Count="0" />
      <LineId Id="137" Count="0" />
      <LineId Id="110" Count="0" />
      <LineId Id="126" Count="1" />
      <LineId Id="142" Count="0" />
      <LineId Id="130" Count="0" />
      <LineId Id="138" Count="0" />
      <LineId Id="105" Count="0" />
      <LineId Id="103" Count="0" />
      <LineId Id="111" Count="0" />
      <LineId Id="104" Count="0" />
      <LineId Id="92" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="16" Count="1" />
      <LineId Id="19" Count="1" />
      <LineId Id="145" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="23" Count="2" />
      <LineId Id="22" Count="0" />
      <LineId Id="59" Count="2" />
      <LineId Id="58" Count="0" />
      <LineId Id="27" Count="2" />
      <LineId Id="26" Count="0" />
      <LineId Id="64" Count="2" />
      <LineId Id="63" Count="0" />
      <LineId Id="31" Count="1" />
      <LineId Id="39" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="68" Count="2" />
      <LineId Id="67" Count="0" />
      <LineId Id="35" Count="2" />
      <LineId Id="34" Count="0" />
      <LineId Id="113" Count="0" />
      <LineId Id="112" Count="0" />
      <LineId Id="114" Count="1" />
      <LineId Id="72" Count="2" />
      <LineId Id="71" Count="0" />
      <LineId Id="81" Count="2" />
      <LineId Id="90" Count="0" />
      <LineId Id="116" Count="0" />
      <LineId Id="123" Count="0" />
      <LineId Id="89" Count="0" />
      <LineId Id="80" Count="0" />
      <LineId Id="139" Count="0" />
      <LineId Id="120" Count="0" />
      <LineId Id="119" Count="0" />
      <LineId Id="121" Count="1" />
      <LineId Id="94" Count="0" />
      <LineId Id="96" Count="0" />
      <LineId Id="133" Count="0" />
      <LineId Id="97" Count="0" />
      <LineId Id="134" Count="2" />
      <LineId Id="98" Count="0" />
    </LineIds>
    <LineIds Name="FB_Machine.Operating_ManualMove">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Machine.Operating_Reset">
      <LineId Id="5" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="11" Count="1" />
      <LineId Id="10" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="29" Count="3" />
      <LineId Id="19" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="21" Count="0" />
    </LineIds>
    <LineIds Name="FB_Machine.Operating_Run">
      <LineId Id="39" Count="0" />
      <LineId Id="27" Count="1" />
      <LineId Id="30" Count="0" />
      <LineId Id="130" Count="1" />
      <LineId Id="52" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="120" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="121" Count="1" />
      <LineId Id="124" Count="0" />
      <LineId Id="123" Count="0" />
      <LineId Id="141" Count="2" />
      <LineId Id="140" Count="0" />
      <LineId Id="97" Count="0" />
      <LineId Id="111" Count="0" />
      <LineId Id="110" Count="0" />
      <LineId Id="112" Count="0" />
      <LineId Id="114" Count="0" />
      <LineId Id="113" Count="0" />
      <LineId Id="90" Count="0" />
      <LineId Id="89" Count="0" />
      <LineId Id="91" Count="0" />
      <LineId Id="79" Count="0" />
      <LineId Id="78" Count="0" />
      <LineId Id="80" Count="0" />
      <LineId Id="82" Count="1" />
      <LineId Id="81" Count="0" />
    </LineIds>
    <LineIds Name="FB_Machine.Operating_ToolChangeInit">
      <LineId Id="24" Count="6" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Machine.Operating_ToolChangeRun">
      <LineId Id="47" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="21" Count="5" />
      <LineId Id="20" Count="0" />
      <LineId Id="17" Count="0" />
    </LineIds>
    <LineIds Name="FB_Machine.Run_Error">
      <LineId Id="11" Count="1" />
      <LineId Id="10" Count="0" />
      <LineId Id="20" Count="1" />
      <LineId Id="23" Count="1" />
      <LineId Id="92" Count="1" />
      <LineId Id="22" Count="0" />
      <LineId Id="67" Count="0" />
      <LineId Id="69" Count="3" />
      <LineId Id="95" Count="1" />
      <LineId Id="68" Count="0" />
      <LineId Id="94" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="27" Count="3" />
      <LineId Id="97" Count="1" />
      <LineId Id="26" Count="0" />
      <LineId Id="75" Count="3" />
      <LineId Id="99" Count="2" />
      <LineId Id="79" Count="0" />
      <LineId Id="55" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="122" Count="1" />
      <LineId Id="126" Count="1" />
      <LineId Id="124" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="36" Count="1" />
      <LineId Id="34" Count="0" />
      <LineId Id="90" Count="1" />
      <LineId Id="35" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="86" Count="0" />
      <LineId Id="102" Count="0" />
      <LineId Id="39" Count="3" />
      <LineId Id="52" Count="1" />
      <LineId Id="89" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="47" Count="1" />
      <LineId Id="45" Count="0" />
      <LineId Id="87" Count="1" />
      <LineId Id="46" Count="0" />
      <LineId Id="58" Count="1" />
      <LineId Id="109" Count="0" />
      <LineId Id="112" Count="2" />
      <LineId Id="111" Count="0" />
    </LineIds>
    <LineIds Name="FB_Machine.State_Machine">
      <LineId Id="5" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="11" Count="12" />
      <LineId Id="28" Count="2" />
      <LineId Id="35" Count="2" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="FB_Machine.Update_Program_String">
      <LineId Id="21" Count="7" />
      <LineId Id="5" Count="0" />
      <LineId Id="29" Count="1" />
      <LineId Id="33" Count="0" />
      <LineId Id="37" Count="1" />
      <LineId Id="34" Count="0" />
      <LineId Id="40" Count="4" />
      <LineId Id="39" Count="0" />
      <LineId Id="46" Count="4" />
      <LineId Id="45" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="35" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>