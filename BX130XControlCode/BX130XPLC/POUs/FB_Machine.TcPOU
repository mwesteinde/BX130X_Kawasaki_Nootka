<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_Machine" Id="{3f2b54bd-7836-4066-a761-fd73c9f3b9ef}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Machine //Control program
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	robotPose 		: Structure_RobotPose;
	// =============== Machine Modules ================================================
	fbRobot					: FB_Robot;					// Robot object
	fbSpindle				: FB_Spindle;				// Spindle Object. Includes spindle speed, tool changing control
	fbGantry				: FB_GantryHoldDown;		// Gantry hold down object. Includes servo control, pneumatic clamping control, robot following
	fbEnclosure				: FB_Enclosure;				// Enclosure control. Includes table clamping, dust collection monitoring, door control
	
	// ============== Errors ==========================================================
	pneumaticsOK	: BOOL;								// True if cylinders in assigned position and pressure ok.
	bErrors			: BOOL;								// True if modules have errors or E stop.								
	
	// =============== State machine ================================================
	eSystemState			: E_MachineState := E_MachineState.INITIALIZATION;  // Current state 
	eSystemStateRequested 	: E_MachineState;									// Requested state
	
	// =============== HMI buttons and states ========================================
	// initialize.content buttons
	bHMIHomeRobot			: BOOL; //
	rTrigHomeRobot			: R_TRIG; //
	bHMIHomeMotors			: BOOL; //
	rTrigHomeMotors			: R_TRIG; //
	bHMICloseDoor			: BOOL; //
	rTrigCloseDoor			: R_TRIG; //
	fTrigOpenDoor			: F_TRIG; //
	bHMILockTables			: BOOL; //
	rTrigLockTables			: R_TRIG; //
	fTrigUnlockTables		: F_TRIG; //
	bHMILowerRaiseRollers	: BOOL; //
	rTrigRaiseRollers		: R_TRIG; //
	fTrigLowerRollers		: F_TRIG; //
	bHMIWarmupSpindle		: BOOL; //
	rTrigWarmupSpindle		: R_TRIG; //
	fTrigStopSpindle		: F_TRIG; //
	
//	isCalledHomeMotors	: BOOL := FALSE;
	
	// initialize.content indicators
	sHMIMotorsHomed			: BOOL; //Todo: Change colour/text when activated
	sHMIDoorClosed			: BOOL; //Todo: Change colour/text when activated
	sHMITablesLocked		: BOOL; //Todo: Change colour/text when activated
	sHMIRollersRaised		: BOOL; //Todo: Change colour/text when activated
	
	// selectProgram.content inputs
	programWallChoice	: USINT; // 1 for front wall, 2 for back wall, 3-16 for additional options
	programOption1		: BOOL; //Front wall: True: E cut, False, no e cut Back wall: True: STDWindow, False, no window
	programOption2		: BOOL; //Front wall: True: glass door, False, wood door Back wall: True: Chimney cut, False, no chimney cut
	programOption3		: BOOL; //Front wall: True: Door lock, false, no lock Back wall: NA
	bHMIRunProgram		: BOOL; 
	rTrigRunProgram		: R_TRIG; //
	
	// run.content buttons
	bHMIStart				: BOOL; // Button to start program. Called from Run.content
	bHMIStop				: BOOL; // Button to return to initialization state. TODO: make
	bHMIHold				: BOOL; // Button to hold program. Called from Run.content
	bHMIResume				: BOOL; // Button to resume (run) program after hold. TODO: make
	bHMILoadTool			: BOOL; // Button to activate tool load pushbutton. Called from Run.content
	bHMIToolLoaded			: BOOL; // Button to confirm tool is loaded. Called from Run.content
	bActivateRollers		: BOOL; // Button to make rollers follow robot. Called from Run.content
	bHMIReset				: BOOL;	// Button to reset program. TODO: make
	bHMIManual				: BOOL; // Button to switch state into manual mode. TODO: make
	
	// run.content indicators
	sHMIPneumaticsOK		: BOOL; // Indicator light of pneumatic pressure, called from run.content
	sHMIRobotHomed			: BOOL; // Indicator light of robot homed, called from run.content. Todo: Change colour/text when activated
	sHMIRollersActivated	: BOOL; // Indicator light of rollers activated, called from run.content
	sHMIeStopsOff			: BOOL; // Indicator light of e stops off, called from run.content
	sHMIDustCollectionOn	: BOOL;
	
	// Error states
	eInitializeServos : Structure_Error;
	
	Enable: BOOL;
	StartEnable: BOOL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Call of actions

	// Init
	
	//HMI update
	// Update each HMI indicator
	
	// Mode and state requests
	Change_State();  // Changes state based on inputs
	State_Machine(); // Calls functions based on state
	
	// Update robot IOs
	fbRobot();
	fbGantry();
	fbEnclosure();
	fbSpindle();
	
	// Enable for power supply, compressed air control and buttons
	
	// Input variables of separating and sorting modules
	
	// Output variables
	
	// HMI button triggers
	rTrigHomeRobot(CLK := bHMIHomeRobot);
	rTrigHomeMotors(CLK := bHMIHomeMotors);
	rTrigCloseDoor(CLK := bHMICloseDoor);
	rTrigLockTables(CLK := bHMILockTables);
	rTrigRaiseRollers(CLK := bHMILowerRaiseRollers);
	rTrigWarmupSpindle(CLK := bHMIWarmupSpindle);
	rTrigRunProgram(CLK := bHMIRunProgram);
	
	fTrigOpenDoor(CLK := bHMICloseDoor);
	fTrigUnlockTables(CLK := bHMILockTables);
	fTrigLowerRollers(CLK := bHMILowerRaiseRollers);
	fTrigStopSpindle(CLK := bHMIWarmupSpindle);

// ====================== Scrap ===================================

//	IF Enable THEN
//		fbSpindle.Stop_Spindle();
//	END_IF
	
//	IF StartEnable THEN
//		fbSpindle.Start_Spindle(spindleSpeed := 12000);
//	END_IF]]></ST>
    </Implementation>
    <Folder Name="StateMachine" Id="{b4b3eed7-4e15-4350-a74a-294b50706019}" />
    <Method Name="Change_State" Id="{11427209-76ae-4b9c-9f30-0498e05b4968}" FolderPath="StateMachine\">
      <Declaration><![CDATA[METHOD Change_State
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="Error_Handling" Id="{270383da-a173-4601-b310-46f8333dc847}">
      <Declaration><![CDATA[METHOD Error_Handling
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="Operating_Error" Id="{34eb4b26-0b5c-454b-a500-c33be7205698}" FolderPath="StateMachine\">
      <Declaration><![CDATA[METHOD Operating_Error
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="Operating_Hold" Id="{d9f86694-1d0b-4add-8c20-fb8a5acf1092}" FolderPath="StateMachine\">
      <Declaration><![CDATA[METHOD Operating_Hold
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="Operating_Initialization" Id="{a0909845-20b7-4f19-88c6-a128d86fcc8b}" FolderPath="StateMachine\">
      <Declaration><![CDATA[METHOD Operating_Initialization
VAR_INPUT
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Pushbuttons
IF rTrigHomeRobot.Q THEN
	fbRobot.Home_Robot(); //Done, tested
END_IF

IF rTrigHomeMotors.Q THEN
	eInitializeServos := fbGantry.Home_Servos(robotPose := fbRobot.robotPose); //Done, tested
END_IF

//Toggle buttons
IF rTrigCloseDoor.Q THEN
	fbEnclosure.Rolling_Door_HMI_Operation(doorCommand := FALSE); //Done, tested no door
END_IF

IF fTrigOpenDoor.Q THEN
	fbEnclosure.Rolling_Door_HMI_Operation(doorCommand := TRUE); //Done, tested no door
END_IF

IF rTrigLockTables.Q THEN
	fbEnclosure.Table_Clamp_Control_HMI(eastTableLock := TRUE, westTableLock := TRUE); //Done, tested
END_IF

IF fTrigUnlockTables.Q THEN
	fbEnclosure.Table_Clamp_Control_HMI(eastTableLock := FALSE, westTableLock := FALSE); //Done, tested
END_IF

IF rTrigRaiseRollers.Q THEN
	fbGantry.Lower_Raise_Rollers(raiseRollers := TRUE); //Done, tested
END_IF

IF fTrigLowerRollers.Q THEN
	fbGantry.Lower_Raise_Rollers(raiseRollers := FALSE); //Done, tested
END_IF

IF rTrigWarmupSpindle.Q THEN
	fbSpindle.Spindle_Warmup(); //Done, tested. TODO: Change spindle is warm flag if spindle hasn't been on for >3 hours, make sure sawblade isn't present
END_IF

IF fTrigStopSpindle.Q THEN
	fbSpindle.Stop_Spindle(); //Done, tested
END_IF

IF rTrigRunProgram.Q THEN
	fbRobot.Program_Select(programChoice := programWallChoice, option1 := programOption1, option2 := programOption2, option3 := programOption3);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Operating_ManualMove" Id="{e062f620-36f2-4ef0-9468-9f06db1c52fd}" FolderPath="StateMachine\">
      <Declaration><![CDATA[METHOD Operating_ManualMove
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="Operating_Reset" Id="{409ce780-c7de-4e8c-a0bb-25edc8e53879}" FolderPath="StateMachine\">
      <Declaration><![CDATA[METHOD Operating_Reset
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="Operating_Run" Id="{39f52282-3ce5-4d02-b41e-113893603b81}" FolderPath="StateMachine\">
      <Declaration><![CDATA[METHOD Operating_Run
VAR
	robotHold : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//fbSpindle.Start_Spindle(spindleSpeed := toolSpeed);

fbRobot.Start_Robot();
//robotHold := fbGantry.Follow_Robot();




]]></ST>
      </Implementation>
    </Method>
    <Method Name="State_Machine" Id="{f466ced8-b935-49bf-a90d-d8b2d5bdc64e}" FolderPath="StateMachine\">
      <Declaration><![CDATA[// Calls functions based on state
METHOD State_Machine 
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE eSystemState OF
	E_MachineState.INITIALIZATION:
		Operating_Initialization();
	
	E_MachineState.MANUALMOVE:
		Operating_ManualMove();
		
	E_MachineState.RUN:
		Operating_Run();
		
	E_MachineState.RESET:
		Operating_Reset();
		
	E_MachineState.ERROR:
		Operating_Error();
END_CASE]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_Machine">
      <LineId Id="108" Count="2" />
      <LineId Id="149" Count="0" />
      <LineId Id="178" Count="1" />
      <LineId Id="152" Count="0" />
      <LineId Id="113" Count="0" />
      <LineId Id="370" Count="0" />
      <LineId Id="115" Count="0" />
      <LineId Id="188" Count="1" />
      <LineId Id="150" Count="0" />
      <LineId Id="464" Count="1" />
      <LineId Id="463" Count="0" />
      <LineId Id="190" Count="0" />
      <LineId Id="116" Count="0" />
      <LineId Id="118" Count="1" />
      <LineId Id="131" Count="0" />
      <LineId Id="122" Count="0" />
      <LineId Id="124" Count="0" />
      <LineId Id="346" Count="5" />
      <LineId Id="127" Count="0" />
      <LineId Id="468" Count="0" />
      <LineId Id="352" Count="0" />
      <LineId Id="356" Count="2" />
      <LineId Id="353" Count="0" />
      <LineId Id="130" Count="0" />
      <LineId Id="104" Count="0" />
      <LineId Id="378" Count="6" />
      <LineId Id="377" Count="0" />
    </LineIds>
    <LineIds Name="FB_Machine.Change_State">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Machine.Error_Handling">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Machine.Operating_Error">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Machine.Operating_Hold">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Machine.Operating_Initialization">
      <LineId Id="15" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="16" Count="1" />
      <LineId Id="19" Count="2" />
      <LineId Id="18" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="23" Count="2" />
      <LineId Id="22" Count="0" />
      <LineId Id="59" Count="2" />
      <LineId Id="58" Count="0" />
      <LineId Id="27" Count="2" />
      <LineId Id="26" Count="0" />
      <LineId Id="64" Count="2" />
      <LineId Id="63" Count="0" />
      <LineId Id="31" Count="1" />
      <LineId Id="39" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="68" Count="2" />
      <LineId Id="67" Count="0" />
      <LineId Id="35" Count="2" />
      <LineId Id="34" Count="0" />
      <LineId Id="72" Count="2" />
      <LineId Id="71" Count="0" />
      <LineId Id="81" Count="2" />
      <LineId Id="80" Count="0" />
    </LineIds>
    <LineIds Name="FB_Machine.Operating_ManualMove">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Machine.Operating_Reset">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Machine.Operating_Run">
      <LineId Id="16" Count="1" />
      <LineId Id="14" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="FB_Machine.State_Machine">
      <LineId Id="5" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="11" Count="12" />
      <LineId Id="10" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>